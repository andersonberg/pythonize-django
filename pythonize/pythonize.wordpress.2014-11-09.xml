<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.9.2" created="2014-11-09 14:02" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Pythonize</title>
	<link>http://www.pythonize.org</link>
	<description>pythonizando seu código</description>
	<pubDate>Sun, 09 Nov 2014 14:02:42 +0000</pubDate>
	<language>pt-BR</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.pythonize.org</wp:base_site_url>
	<wp:base_blog_url>http://www.pythonize.org</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>absd</wp:author_login><wp:author_email>andersonberg@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Anderson Berg]]></wp:author_display_name><wp:author_first_name><![CDATA[Anderson Berg]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>romulo</wp:author_login><wp:author_email>romulo@romulojales.com</wp:author_email><wp:author_display_name><![CDATA[Rômulo Jales]]></wp:author_display_name><wp:author_first_name><![CDATA[Rômulo]]></wp:author_first_name><wp:author_last_name><![CDATA[Jales]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>62</wp:term_id><wp:category_nicename>computacao_cientifica</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Computação Científica]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>34</wp:term_id><wp:category_nicename>core</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Core]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>61</wp:term_id><wp:category_nicename>ferramentas</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ferramentas]]></wp:cat_name><wp:category_description><![CDATA[Ferramentas de apoio ao desenvolvimento]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>60</wp:term_id><wp:category_nicename>iniciante</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Iniciante]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>programacao</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Programação]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>tutorial</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Tutorial]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>30</wp:term_id><wp:category_nicename>web</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>algoritmo</wp:tag_slug><wp:tag_name><![CDATA[algoritmo]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>beautifulsoup</wp:tag_slug><wp:tag_name><![CDATA[beautifulsoup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>crawler</wp:tag_slug><wp:tag_name><![CDATA[crawler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>crawler-python</wp:tag_slug><wp:tag_name><![CDATA[crawler python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>cython</wp:tag_slug><wp:tag_name><![CDATA[cython]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>decorador</wp:tag_slug><wp:tag_name><![CDATA[decorador]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>decorators</wp:tag_slug><wp:tag_name><![CDATA[decorators]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>django</wp:tag_slug><wp:tag_name><![CDATA[django]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>download</wp:tag_slug><wp:tag_name><![CDATA[download]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>editor</wp:tag_slug><wp:tag_name><![CDATA[editor]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>executavel</wp:tag_slug><wp:tag_name><![CDATA[executável]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>gvim</wp:tag_slug><wp:tag_name><![CDATA[gvim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>ide</wp:tag_slug><wp:tag_name><![CDATA[ide]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>ide-python</wp:tag_slug><wp:tag_name><![CDATA[ide python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>idle</wp:tag_slug><wp:tag_name><![CDATA[idle]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>instalacao</wp:tag_slug><wp:tag_name><![CDATA[instalação]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>lambda</wp:tag_slug><wp:tag_name><![CDATA[lambda]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>lista</wp:tag_slug><wp:tag_name><![CDATA[lista]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>numpy</wp:tag_slug><wp:tag_name><![CDATA[numpy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>numpy-tutorial</wp:tag_slug><wp:tag_name><![CDATA[numpy tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>paramiko</wp:tag_slug><wp:tag_name><![CDATA[paramiko]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>parser</wp:tag_slug><wp:tag_name><![CDATA[parser]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>parser-python</wp:tag_slug><wp:tag_name><![CDATA[parser python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[plugin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>programacao-2</wp:tag_slug><wp:tag_name><![CDATA[programação]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>py2exe</wp:tag_slug><wp:tag_name><![CDATA[py2exe]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>pycrypto</wp:tag_slug><wp:tag_name><![CDATA[pycrypto]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>python-numpy</wp:tag_slug><wp:tag_name><![CDATA[python numpy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>python-web</wp:tag_slug><wp:tag_name><![CDATA[python web]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>python-twitter</wp:tag_slug><wp:tag_name><![CDATA[python-twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>rest</wp:tag_slug><wp:tag_name><![CDATA[rest]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>setuptools</wp:tag_slug><wp:tag_name><![CDATA[setuptools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>slice</wp:tag_slug><wp:tag_name><![CDATA[slice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>sqlite</wp:tag_slug><wp:tag_name><![CDATA[sqlite]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>ssh</wp:tag_slug><wp:tag_name><![CDATA[ssh]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>tastypie</wp:tag_slug><wp:tag_name><![CDATA[tastypie]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>tkinter</wp:tag_slug><wp:tag_name><![CDATA[tkinter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>tutoial</wp:tag_slug><wp:tag_name><![CDATA[tutoial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>tutorial-2</wp:tag_slug><wp:tag_name><![CDATA[tutorial]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>twitter</wp:tag_slug><wp:tag_name><![CDATA[twitter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>twitter-python</wp:tag_slug><wp:tag_name><![CDATA[twitter python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[vim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>vim-python</wp:tag_slug><wp:tag_name><![CDATA[vim python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>web-2</wp:tag_slug><wp:tag_name><![CDATA[web]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>webcrawler</wp:tag_slug><wp:tag_name><![CDATA[webcrawler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[windows]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>45</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>menu-1</wp:term_slug><wp:term_name><![CDATA[Menu 1]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.9.2</generator>

	<item>
				<title>python-cmd</title>
		<link>http://www.pythonize.org/iniciando-a-programacao-em-python/python-cmd-3/</link>
		<pubDate>Mon, 05 Sep 2011 03:03:43 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2011-09-05 03:03:43</wp:post_date>
		<wp:post_date_gmt>2011-09-05 03:03:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-cmd-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>15</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/python-cmd1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:3:"251";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:23:"2011/09/python-cmd1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"python-cmd1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 18.3% (1.3&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:23:"python-cmd1-300x150.png";s:5:"width";s:3:"300";s:6:"height";s:3:"150";s:10:"wp_smushit";s:29:"Reduced by 7.1% (1.2&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 1.4% (450&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Python cmd]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>python-cmd</title>
		<link>http://www.pythonize.org/iniciando-a-programacao-em-python/python-cmd-4/</link>
		<pubDate>Mon, 05 Sep 2011 03:03:55 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Chamando o interpretador Python na linha de comando]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2011-09-05 03:03:55</wp:post_date>
		<wp:post_date_gmt>2011-09-05 03:03:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-cmd-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>15</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/python-cmd2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:3:"251";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:23:"2011/09/python-cmd2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"python-cmd2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 18.3% (1.3&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:23:"python-cmd2-300x150.png";s:5:"width";s:3:"300";s:6:"height";s:3:"150";s:10:"wp_smushit";s:29:"Reduced by 7.1% (1.2&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 1.4% (450&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Python na linha de comando]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>idle-python</title>
		<link>http://www.pythonize.org/iniciando-a-programacao-em-python/idle-python/</link>
		<pubDate>Mon, 05 Sep 2011 03:06:41 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle-python.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[IDLE Python]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2011-09-05 03:06:41</wp:post_date>
		<wp:post_date_gmt>2011-09-05 03:06:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>idle-python</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>15</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle-python.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[IDLE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/idle-python.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:3:"417";s:14:"hwstring_small";s:23:"height='96' width='115'";s:4:"file";s:23:"2011/09/idle-python.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"idle-python-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 14.4% (1.7&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:23:"idle-python-300x250.png";s:5:"width";s:3:"300";s:6:"height";s:3:"250";s:10:"wp_smushit";s:28:"Reduced by 2.1% (514&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>python-linux</title>
		<link>http://www.pythonize.org/iniciando-a-programacao-em-python/python-linux/</link>
		<pubDate>Mon, 05 Sep 2011 13:42:18 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-linux.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Interpretador Python no Shell do Linux]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2011-09-05 13:42:18</wp:post_date>
		<wp:post_date_gmt>2011-09-05 13:42:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-linux</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>15</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-linux.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/python-linux.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:3:"338";s:14:"hwstring_small";s:23:"height='86' width='128'";s:4:"file";s:24:"2011/09/python-linux.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"python-linux-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 30.1% (3.6&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:24:"python-linux-300x202.png";s:5:"width";s:3:"300";s:6:"height";s:3:"202";s:10:"wp_smushit";s:30:"Reduced by 27.5% (5.3&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:30:"Reduced by 18.9% (5.5&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Shell Python Linux]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>helloworldidle</title>
		<link>http://www.pythonize.org/programando-em-python-no-idle/helloworldidle-2/</link>
		<pubDate>Thu, 08 Sep 2011 00:48:16 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2011-09-08 00:48:16</wp:post_date>
		<wp:post_date_gmt>2011-09-08 00:48:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>helloworldidle-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/helloworldidle1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:2:"89";s:14:"hwstring_small";s:23:"height='22' width='128'";s:4:"file";s:27:"2011/09/helloworldidle1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"helloworldidle1-150x89.png";s:5:"width";s:3:"150";s:6:"height";s:2:"89";s:10:"wp_smushit";s:28:"Reduced by 6.2% (200&nbsp;B)";}s:6:"medium";a:4:{s:4:"file";s:26:"helloworldidle1-300x53.png";s:5:"width";s:3:"300";s:6:"height";s:2:"53";s:10:"wp_smushit";s:28:"Reduced by 2.5% (244&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:10:"No savings";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Hello World IDLE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>idle_format</title>
		<link>http://www.pythonize.org/programando-em-python-no-idle/idle_format/</link>
		<pubDate>Thu, 08 Sep 2011 00:51:38 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2011-09-08 00:51:38</wp:post_date>
		<wp:post_date_gmt>2011-09-08 00:51:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>idle_format</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/idle_format.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"500";s:6:"height";s:3:"248";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:23:"2011/09/idle_format.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"idle_format-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 17.8% (2.5&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:23:"idle_format-300x148.png";s:5:"width";s:3:"300";s:6:"height";s:3:"148";s:10:"wp_smushit";s:29:"Reduced by 7.4% (1.7&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 3.4% (1.6&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Menu Format no IDLE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cython-logo.svg</title>
		<link>http://www.pythonize.org/introducao-a-programacao-em-cython/cython-logo-svg/</link>
		<pubDate>Sat, 10 Sep 2011 12:23:31 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/Cython-logo.svg_.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2011-09-10 12:23:31</wp:post_date>
		<wp:post_date_gmt>2011-09-10 12:23:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cython-logo-svg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>94</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/Cython-logo.svg_.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"440";s:6:"height";s:3:"196";s:14:"hwstring_small";s:23:"height='57' width='128'";s:4:"file";s:28:"2011/09/Cython-logo.svg_.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"Cython-logo.svg_-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 16.3% (1.6&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:28:"Cython-logo.svg_-300x133.png";s:5:"width";s:3:"300";s:6:"height";s:3:"133";s:10:"wp_smushit";s:30:"Reduced by 14.9% (2.7&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 27.7% (5&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Cython-logo.svg_.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Cython logo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cython-logo.svg</title>
		<link>http://www.pythonize.org/introducao-a-programacao-em-cython/cython-logo-svg-2/</link>
		<pubDate>Sat, 10 Sep 2011 12:27:11 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/Cython-logo.svg_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2011-09-10 12:27:11</wp:post_date>
		<wp:post_date_gmt>2011-09-10 12:27:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cython-logo-svg-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>94</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/Cython-logo.svg_1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/Cython-logo.svg_1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"224";s:6:"height";s:3:"100";s:14:"hwstring_small";s:23:"height='57' width='128'";s:4:"file";s:29:"2011/09/Cython-logo.svg_1.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"Cython-logo.svg_1-150x100.png";s:5:"width";s:3:"150";s:6:"height";s:3:"100";s:10:"wp_smushit";s:28:"Reduced by 9.5% (621&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:30:"Reduced by 12.7% (1.2&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Cython logo]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>matriz</title>
		<link>http://www.pythonize.org/tutorial-basico-de-numpy/matriz/</link>
		<pubDate>Tue, 25 Oct 2011 00:15:35 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/10/matriz.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Fonte: SciPy 2011 - Jonathan Rocher]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2011-10-25 00:15:35</wp:post_date>
		<wp:post_date_gmt>2011-10-25 00:15:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>matriz</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>159</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/10/matriz.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/matriz.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"353";s:6:"height";s:3:"346";s:14:"hwstring_small";s:22:"height='96' width='97'";s:4:"file";s:18:"2011/10/matriz.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"matriz-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:30:"Reduced by 11.3% (1.4&nbsp;KB)";}s:6:"medium";a:4:{s:4:"file";s:18:"matriz-300x294.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"294";s:10:"wp_smushit";s:30:"Reduced by 13.8% (4.2&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 3.7% (1.1&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[matriz de inteiros]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>vimpython</title>
		<link>http://www.pythonize.org/vim-uma-ide-amigavel-pra-python/vimpython/</link>
		<pubDate>Mon, 09 Jan 2012 17:22:34 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vimpython.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Vim com highlighting para Python e número de linhas]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2012-01-09 17:22:34</wp:post_date>
		<wp:post_date_gmt>2012-01-09 17:22:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vimpython</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>278</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vimpython.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/vimpython.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:3:"372";s:6:"height";s:3:"118";s:14:"hwstring_small";s:23:"height='40' width='128'";s:4:"file";s:21:"2012/01/vimpython.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"vimpython-150x118.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"118";s:10:"wp_smushit";s:28:"Reduced by 7.9% (263&nbsp;B)";}s:6:"medium";a:4:{s:4:"file";s:20:"vimpython-300x95.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"95";s:10:"wp_smushit";s:28:"Reduced by 7.3% (428&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 2.8% (176&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Vim com highlighting para Python e número de linhas]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>vim explorer</title>
		<link>http://www.pythonize.org/vim-uma-ide-amigavel-pra-python/vim-explorer/</link>
		<pubDate>Mon, 09 Jan 2012 17:32:08 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-explorer.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Code Explorer para o Vim]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2012-01-09 17:32:08</wp:post_date>
		<wp:post_date_gmt>2012-01-09 17:32:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-explorer</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>278</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-explorer.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/vim-explorer.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:4:"1278";s:6:"height";s:3:"133";s:14:"hwstring_small";s:23:"height='13' width='128'";s:4:"file";s:24:"2012/01/vim-explorer.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"vim-explorer-150x133.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"133";s:10:"wp_smushit";s:28:"Reduced by 9.9% (149&nbsp;B)";}s:6:"medium";a:4:{s:4:"file";s:23:"vim-explorer-300x31.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"31";s:10:"wp_smushit";s:27:"Reduced by 3.0% (88&nbsp;B)";}s:5:"large";a:4:{s:4:"file";s:25:"vim-explorer-1024x106.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"106";s:10:"wp_smushit";s:29:"Reduced by 8.7% (1.6&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 6.7% (1.5&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Vim com code explorer]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>vim code folding</title>
		<link>http://www.pythonize.org/vim-uma-ide-amigavel-pra-python/vim-code-folding/</link>
		<pubDate>Mon, 09 Jan 2012 18:17:52 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-code-folding.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Ocultar código no Vim]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2012-01-09 18:17:52</wp:post_date>
		<wp:post_date_gmt>2012-01-09 18:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-code-folding</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>278</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-code-folding.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/vim-code-folding.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";s:4:"1143";s:6:"height";s:3:"166";s:14:"hwstring_small";s:23:"height='18' width='128'";s:4:"file";s:28:"2012/01/vim-code-folding.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:28:"vim-code-folding-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";s:10:"wp_smushit";s:29:"Reduced by 18.1% (956&nbsp;B)";}s:6:"medium";a:4:{s:4:"file";s:27:"vim-code-folding-300x43.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"43";s:10:"wp_smushit";s:29:"Reduced by 16.4% (944&nbsp;B)";}s:5:"large";a:4:{s:4:"file";s:29:"vim-code-folding-1024x148.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"148";s:10:"wp_smushit";s:30:"Reduced by 16.9% (6.2&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 6.3% (2.1&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Ocultar código automaticamente no Vim]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>pythonize_logo-noback</title>
		<link>http://www.pythonize.org/?attachment_id=495</link>
		<pubDate>Wed, 27 Nov 2013 18:30:46 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2013/11/pythonize_logo-noback1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>495</wp:post_id>
		<wp:post_date>2013-11-27 15:30:46</wp:post_date>
		<wp:post_date_gmt>2013-11-27 18:30:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pythonize_logo-noback-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>491</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2013/11/pythonize_logo-noback1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/11/pythonize_logo-noback1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:252;s:6:"height";i:58;s:4:"file";s:34:"2013/11/pythonize_logo-noback1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:33:"pythonize_logo-noback1-150x58.png";s:5:"width";i:150;s:6:"height";i:58;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 29.8% (2.2&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:33:"pythonize_logo-noback1-100x58.png";s:5:"width";i:100;s:6:"height";i:58;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 24.4% (1.1&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:30:"Reduced by 29.3% (2.9&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Pythonize]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>twitter buttons</title>
		<link>http://www.pythonize.org/crawler-pra-twitter/twitter-buttons-medio/</link>
		<pubDate>Mon, 01 Sep 2014 14:23:21 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/02/twitter-buttons-medio.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[twitter buttons]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date>2014-09-01 11:23:21</wp:post_date>
		<wp:post_date_gmt>2014-09-01 14:23:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitter-buttons-medio</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>333</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/02/twitter-buttons-medio.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/02/twitter-buttons-medio.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:427;s:4:"file";s:33:"2012/02/twitter-buttons-medio.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:33:"twitter-buttons-medio-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.6% (826&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:33:"twitter-buttons-medio-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 7.5% (1.7&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:33:"twitter-buttons-medio-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.7% (458&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:33:"twitter-buttons-medio-336x336.jpg";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 7.5% (2.6&nbsp;KB)";}s:21:"single-post-landscape";a:5:{s:4:"file";s:33:"twitter-buttons-medio-520x300.jpg";s:5:"width";i:520;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 7.6% (3.7&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 5.2% (8.6&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[twitter buttons]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>twitter buttons peq</title>
		<link>http://www.pythonize.org/crawler-pra-twitter/twitter-buttons-peq/</link>
		<pubDate>Mon, 01 Sep 2014 14:28:54 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/02/twitter-buttons-peq.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2014-09-01 11:28:54</wp:post_date>
		<wp:post_date_gmt>2014-09-01 14:28:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>twitter-buttons-peq</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>333</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/02/twitter-buttons-peq.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/02/twitter-buttons-peq.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:240;s:6:"height";i:160;s:4:"file";s:31:"2012/02/twitter-buttons-peq.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:31:"twitter-buttons-peq-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.7% (894&nbsp;B)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:31:"twitter-buttons-peq-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.6% (477&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 2.9% (782&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[twitter buttons]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>unixstickers</title>
		<link>http://www.pythonize.org/vim-uma-ide-amigavel-pra-python/unixstickers/</link>
		<pubDate>Mon, 01 Sep 2014 15:56:53 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/unixstickers.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date>2014-09-01 12:56:53</wp:post_date>
		<wp:post_date_gmt>2014-09-01 15:56:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unixstickers</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>278</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/unixstickers.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/unixstickers.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:599;s:6:"height";i:454;s:4:"file";s:24:"2012/01/unixstickers.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:24:"unixstickers-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:27:"Reduced by 9.0% (1&nbsp;KB)";}s:6:"medium";a:5:{s:4:"file";s:24:"unixstickers-300x227.jpg";s:5:"width";i:300;s:6:"height";i:227;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 8.7% (2.3&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:24:"unixstickers-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 9.5% (667&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:24:"unixstickers-336x336.jpg";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 7.5% (2.4&nbsp;KB)";}s:21:"single-post-landscape";a:5:{s:4:"file";s:24:"unixstickers-520x300.jpg";s:5:"width";i:520;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 6.9% (2.7&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 9.6% (7.9&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[unix stickers]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>beautifulsoup</title>
		<link>http://www.pythonize.org/parser-html-com-beautifulsoup/beautifulsoup/</link>
		<pubDate>Thu, 11 Sep 2014 12:42:37 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/12/beautifulsoup.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[beautifulsoup]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date>2014-09-11 09:42:37</wp:post_date>
		<wp:post_date_gmt>2014-09-11 12:42:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beautifulsoup</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>252</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/12/beautifulsoup.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/12/beautifulsoup.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:250;s:6:"height";i:298;s:4:"file";s:25:"2011/12/beautifulsoup.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:5:{s:4:"file";s:25:"beautifulsoup-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:30:"Reduced by 10.3% (1.4&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:25:"beautifulsoup-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 10.1% (713&nbsp;B)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:25:"beautifulsoup-250x200.jpg";s:5:"width";i:250;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:30:"Reduced by 10.1% (2.9&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:29:"Reduced by 4.9% (1.2&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[beautifulsoup]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>acesso-remoto-a-servidores</title>
		<link>http://www.pythonize.org/ssh-com-paramiko/acesso-remoto-a-servidores/</link>
		<pubDate>Thu, 11 Sep 2014 13:53:41 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2013/05/acesso-remoto-a-servidores.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>568</wp:post_id>
		<wp:post_date>2014-09-11 10:53:41</wp:post_date>
		<wp:post_date_gmt>2014-09-11 13:53:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acesso-remoto-a-servidores</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>430</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2013/05/acesso-remoto-a-servidores-e1411426759286.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/acesso-remoto-a-servidores-e1411426759286.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:400;s:6:"height";i:232;s:4:"file";s:53:"2013/05/acesso-remoto-a-servidores-e1411426759286.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:38:"acesso-remoto-a-servidores-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 5.3% (383&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:38:"acesso-remoto-a-servidores-300x174.jpg";s:5:"width";i:300;s:6:"height";i:174;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 5.1% (530&nbsp;B)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:38:"acesso-remoto-a-servidores-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 6.4% (293&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:38:"acesso-remoto-a-servidores-336x336.jpg";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 4.8% (978&nbsp;B)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:38:"acesso-remoto-a-servidores-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 4.9% (616&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 4.8% (736&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[acesso-remoto-a-servidores]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";i:620;s:6:"height";i:360;s:4:"file";s:30:"acesso-remoto-a-servidores.jpg";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>anderson</title>
		<link>http://www.pythonize.org/sobre/anderson/</link>
		<pubDate>Mon, 22 Sep 2014 22:47:02 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/anderson.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date>2014-09-22 19:47:02</wp:post_date>
		<wp:post_date_gmt>2014-09-22 22:47:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anderson</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>4</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/anderson.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Anderson]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/anderson.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1720;s:6:"height";i:1736;s:4:"file";s:20:"2011/09/anderson.jpg";s:5:"sizes";a:6:{s:9:"thumbnail";a:5:{s:4:"file";s:20:"anderson-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 6.5% (538&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:20:"anderson-297x300.jpg";s:5:"width";i:297;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 5.8% (1.3&nbsp;KB)";}s:5:"large";a:5:{s:4:"file";s:22:"anderson-1014x1024.jpg";s:5:"width";i:1014;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:30:"Reduced by 5.7% (10.5&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:20:"anderson-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.1% (346&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:20:"anderson-336x336.jpg";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 5.6% (1.4&nbsp;KB)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:20:"anderson-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 5.6% (856&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:30:"Reduced by 2.6% (10.5&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>anderson_small</title>
		<link>http://www.pythonize.org/sobre/anderson_small/</link>
		<pubDate>Mon, 22 Sep 2014 23:04:36 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/anderson_small.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>586</wp:post_id>
		<wp:post_date>2014-09-22 20:04:36</wp:post_date>
		<wp:post_date_gmt>2014-09-22 23:04:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anderson_small</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>4</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/anderson_small-e1411427131589.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Anderson]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/anderson_small-e1411427131589.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:200;s:6:"height";i:202;s:4:"file";s:41:"2011/09/anderson_small-e1411427131589.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:26:"anderson_small-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 6.7% (551&nbsp;B)";}s:6:"medium";a:5:{s:4:"file";s:26:"anderson_small-297x300.jpg";s:5:"width";i:297;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 5.8% (1.3&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:26:"anderson_small-100x100.jpg";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 7.1% (347&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:26:"anderson_small-336x336.jpg";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:29:"Reduced by 5.6% (1.4&nbsp;KB)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:26:"anderson_small-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";s:10:"wp_smushit";s:28:"Reduced by 5.8% (884&nbsp;B)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:28:"Reduced by 6.3% (750&nbsp;B)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:9:"full-orig";a:3:{s:5:"width";i:500;s:6:"height";i:505;s:4:"file";s:18:"anderson_small.jpg";}s:18:"full-1411427121322";a:3:{s:5:"width";i:400;s:6:"height";i:404;s:4:"file";s:33:"anderson_small-e1411427112254.jpg";}s:18:"full-1411427131589";a:3:{s:5:"width";i:300;s:6:"height";i:303;s:4:"file";s:33:"anderson_small-e1411427121322.jpg";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Página de Exemplo</title>
		<link>http://www.pythonize.org/?page_id=2</link>
		<pubDate>Wed, 31 Aug 2011 20:13:10 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[Este é o exemplo de uma página. É diferente de um post de blog porque é estática e pode aparecer em menus de navegação (na maioria dos temas). A maioria das pessoas começam com uma página 'Sobre' que as apresenta aos potenciais visitantes do site. Você pode usar algo como:

<blockquote>Oi! Sou um estudante de Biologia e gosto de esportes e natureza. Nos fins-de-semana pratico futebol com meus amigos no clube local. Eu moro em Valinhos e fiz este site para falar sobre minha cidade.</blockquote>

...ou algo como:

<blockquote>A empresa Logos foi fundada em 1980, e tem provido o comércio local com o que há de melhor em informatização. Localizada em Recife, nossa empresa tem se destacado como um das que também contribuem para o descarte correto de equipamentos eletrônicos substituídos.</blockquote>

Como um novo usuário WordPress, vá ao seu <a href="http://www.pythonize.org/wordpress/wp-admin/">Painel</a> para excluir este conteúdo e criar o seu. Divirta-se!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2011-08-31 20:13:10</wp:post_date>
		<wp:post_date_gmt>2011-08-31 20:13:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pagina-exemplo</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Sobre</title>
		<link>http://www.pythonize.org/sobre/</link>
		<pubDate>Sun, 04 Sep 2011 14:46:38 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?page_id=4</guid>
		<description></description>
		<content:encoded><![CDATA[O Pythonize foi criado com o objetivo de compartilhar experiências de programação em Python, juntamente com ferramentas e pacotes que são comuns no cotidiano de um programador. Este blog é útil também para os iniciantes na linguagem, um lugar para conhecer novas ferramentas e tirar dúvidas, avançando no estudo de uma das linguagens que mais cresce no mundo.

<h3>AUTORES</h3>

<strong>Anderson Berg</strong> é mestre em Ciência da Computação e engenheiro da Computação por formação. Entusiasta de Python a muitos anos, criou o projeto de mestrado todo com Python e numpy e já trabalhou com Python fazendo alguns scritps pra projetos grandes.

<strong>Rômulo Jales</strong> é formado em engenharia da computação pela Universidade de Pernambuco. Experiente em Python e Django. Atualmente trabalhando na globo.com especificamente no produto globoesporte.com]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2011-09-04 14:46:38</wp:post_date>
		<wp:post_date_gmt>2011-09-04 14:46:38</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>sobre</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Contato</title>
		<link>http://www.pythonize.org/contato/</link>
		<pubDate>Sun, 04 Sep 2011 14:59:49 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?page_id=10</guid>
		<description></description>
		<content:encoded><![CDATA[[contact-form 1 "Formulário de contato 1"]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2011-09-04 14:59:49</wp:post_date>
		<wp:post_date_gmt>2011-09-04 14:59:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>contato</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Iniciando a programação em Python</title>
		<link>http://www.pythonize.org/iniciando-a-programacao-em-python/</link>
		<pubDate>Sun, 04 Sep 2011 15:06:10 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[Neste blog vou apresentar o que eu aprendi de Python durante mais de três anos e minhas experiências diárias com a linguagem. Vou começar do início, mostrando para aqueles que estão iniciando a como programar nesta poderosa linguagem.

<!--more-->

Não vou dizer por que você deve programar em Python. Eu a escolhi porque acho uma linguagem simples e poderosa, com poucas linhas de código você consegue criar uma aplicação completa rapidamente. Gosto de Python também porque possui muitas ferramentas que facilitam o dia-a-dia do desenvolvimento de software tanto comercial quanto científico.

Então vamos ao que interessa, pra programar em Python você precisa fazer o download e instalar em sua máquina.

<strong>Instalação para os usuários Linux/Mac OS X</strong>

Se você usa uma distribuição Linux, seja Ubuntu, Fedora, OpenSUSE, CentOS, etc... ou se você usa o Mac OS X é bem provável que o Python já esteja instalado, basta abrir um terminal (konsole, para KDE ou gnome-terminal para Gnome) e digitar “python” (sem aspas) que o interpretador Python irá iniciar.

[caption id="attachment_35" align="aligncenter" width="500"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-linux.png"><img class="size-full wp-image-35" title="python-linux" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-linux.png" alt="Shell Python Linux" width="500" height="338" /></a> Interpretador Python no Shell do Linux[/caption]

<strong>Instalação para os usuários Windows</strong>

Para os usuários de Windows é necessário instalar o interpretador. Visite o site <a href="http://www.python.org/download/">http://www.python.org/download/</a> e baixe a última versão. Python mantém duas versões: 2.7.x e 3.2.x. Se você não sabe qual escolher, vá de 2.7, pois muitas ferramentas e frameworks são compatíveis somente com a versão 2.7. Instale normalmente, como qualquer outro instalador Windows. Depois da instalação é preciso configurar a variável PATH do sistema. No Windows 7, abra o Painel de Controle, na pesquisa (no canto superior direito)  digite “variáveis de ambiente” (sem aspas) e clique em “Editar variáveis de ambiente para sua conta”. Na seção: “Variáveis de usuário” clique na variável PATH ou crie uma com este nome e no campo “Valor da variável” digite: “;C:\Python27” (sem aspas) no final do texto que já estiver lá (isso se você instalou o Python na pasta raiz C:&#41;

Pronto, agora abra o prompt de comando e digite python, você terá o interpretador pronto pra trabalhar.

[caption id="attachment_28" align="aligncenter" width="500"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd2.png"><img class="size-full wp-image-28 " title="python-cmd" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/python-cmd2.png" alt="Python na linha de comando" width="500" height="251" /></a> Chamando o interpretador Python na linha de comando[/caption]

Como alternativa, junto com o Python é instalado um ambiente Shell de desenvolvimento, o IDLE, que você pode usar como interpretador (da mesma forma que no cmd) ou como editor de arquivos Python.

[caption id="attachment_31" align="aligncenter" width="500"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle-python.png"><img class="size-full wp-image-31 " title="idle-python" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle-python.png" alt="IDLE" width="500" height="417" /></a> IDLE Python[/caption]

<strong>Primeiros passos no interpretador</strong>

Com o Python devidamente instalado no seu sistema, vamos fazer alguns testes para ter as primeiras impressões de como é a experiência de programação. Vamos então, usar o prompt do interpretador Python. Você pode usar o IDLE ou iniciar o interpretador na linha de comando. Para imprimir qualquer texto na linha de comando, basta digitar print seguido de um texto entre aspas. Por exemplo:

<blockquote>
  &gt;&gt; print “Hello World!”
</blockquote>

Hello World

<blockquote>
  &gt;&gt; print “Meu primeiro teste em Python.”
</blockquote>

Meu primeiro teste em Python.

Bem simples, e você já fez o clássico “Hello World” em Python.

O interpretador Python pode ser usado como calculadora:

<blockquote>
  &gt;&gt; 2+8
</blockquote>

10

<blockquote>
  &gt;&gt; 9*7
</blockquote>

63

Digite o seguinte no interpretador:

<blockquote>
  &gt;&gt; import math
</blockquote>

Fazendo isso você estará carregando o módulo de funções matemáticas de Python. Com isso estarão disponíveis diversas funções matemáticas pra você testar:

<blockquote>
  &gt;&gt; math.sqrt(16)
</blockquote>

4.0

<blockquote>
  &gt;&gt; math.exp(4)
</blockquote>

54.598150033144236

<blockquote>
  &gt;&gt; math.pow(5,3)
</blockquote>

125.0]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2011-09-04 15:06:10</wp:post_date>
		<wp:post_date_gmt>2011-09-04 15:06:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iniciando-a-programacao-em-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="download"><![CDATA[download]]></category>
		<category domain="category" nicename="iniciante"><![CDATA[Iniciante]]></category>
		<category domain="post_tag" nicename="instalacao"><![CDATA[instalação]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[93]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Veja como dar os primeiros passos para programar em Python. Como fazer o download, instalar, configurar e começar a programar em Python.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[python, programação, instalação python, download python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Iniciando a programação em Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:13;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228279]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2760</wp:comment_id>
			<wp:comment_author><![CDATA[Antunes Vatuva]]></wp:comment_author>
			<wp:comment_author_email>badvtv@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>196.202.255.82</wp:comment_author_IP>
			<wp:comment_date>2013-09-10 12:55:19</wp:comment_date>
			<wp:comment_date_gmt>2013-09-10 15:55:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Achei divertido trabalhar com python.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378828519.507399082183837890625;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379006183.5567839145660400390625;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600647752]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Programando em Python no IDLE</title>
		<link>http://www.pythonize.org/programando-em-python-no-idle/</link>
		<pubDate>Thu, 08 Sep 2011 00:46:47 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[Depois da instalação do Python e alguns testes vamos pôr a mão na massa e trabalhar de verdade com arquivos de código. Todo código que você faz no interpretador é perdido quando você fecha o interpretador. Mas eu fiz muito código legal e vou simplesmente perder tudo? Python também trabalha com arquivos de código que você pode salvar em sua máquina para rodar depois.

<!--more-->

Os arquivos Python têm extensão .py. É possível rodar um arquivo Python a partir da linha de comando da seguinte forma:

$ python nome_do_arquivo.py

Com isso todo o código que está salvo no arquivo é transformado em bytecode, que é um arquivo binário usado pelo interpretador. O bytecode é multiplataforma, ou seja, você pode levar seu código pra rodar em qualquer máquina e qualquer sistema. O bytecode é armazenado em sua máquina geralmente com a extensão .pyc, quando você executar seu código novamente sem alterações o programa não precisa ser compilado de novo, sendo executado mais rápido. Sempre que o seu código fonte é alterado, o interpretador gera um novo bytecode.

Você pode escrever seu código no tradicional bloco de notas, mas existem diversas alternativas para escrever código Python e eu recomendo fortemente que não seja escrito no bloco de notas. Existem vários editores de texto e IDEs próprias pra se escrever código em Python. No Windows temos o Notepad++ que tem highlighting (destaca palavras especiais e seu código em cores) ou o próprio IDLE que também vem com highlighting, auto-identação e outros recursos que facilitam a criação do código. No Linux tem o Vim, que possui todos esses recursos citados anteriormente ou o Kate. Você pode ver outros editores na <a href="http://wiki.python.org/moin/PythonEditors">lista de editores Python</a> e também <a href="http://wiki.python.org/moin/IntegratedDevelopmentEnvironments">IDEs que suportam Python</a>.

Neste post vamos tratar do IDLE para Windows em outro post vou falar do Vim no Linux, se alguém tiver experiência com outros editores ou IDEs, por favor compartilhe conosco nos comentários.

<strong>IDLE</strong>

O IDLE, além de ter uma linha de comando Python, também é usado como editor de arquivo fonte. Com a janela principal do IDLE aberta vá ao menu File-&gt;New Window e será aberta uma janela em branco onde é possível escrever o código.

Vamos fazer um pequeno teste. Na nova janela aberta digite o código que está na imagem (print "Hello World"):

[caption id="attachment_73" align="aligncenter" width="500"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle2.png"><img class="size-full wp-image-73" title="helloworldidle" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/helloworldidle2.png" alt="" width="500" height="89" /></a> Hello World no IDLE[/caption]

Salve o arquivo com o nome: helloworld.py

Você já pode perceber a função highlighting nesse código.

Nesta mesma janela, vá ao menu Run-&gt;Run Module ou aperte a tecla F5. Vai ser impresso o texto Hello World na tela do interpretador.

Vamos avançar um pouco mais. Escreva o seguinte trecho de código no IDLE:

[sourcecode language="python"]

<h1>-<em>- coding: latin1 -</em>-</h1>

x = 7*3        #Isto é um comentário
y = "Hello"     #Este é mais um comentário
if y == "Hello":
x = x + 1
y = y + "World"    #Concatenação de strings
print x
print y
[/sourcecode]

Aqui, mais uma função do IDLE: auto-identação, assim que você digita linha 4 e dá Enter, o IDLE identifica um novo bloco de código. O Python identifica blocos de código através da identação, diferente de outras linguagens como C e Java que identificam blocos entre chaves ({}).

Outras funções interessante estão no menu Format na janela de edição de código.

[caption id="attachment_77" align="aligncenter" width="500"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png"><img class="size-full wp-image-77" title="idle_format" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/idle_format.png" alt="" width="500" height="248" /></a> Menu Format no IDLE[/caption]

Neste menu você pode identar ou tirar identação de um trecho selecionado, é possível comentar ou descomentar o código, transformar tab em espaços ou vice-versa.

Dúvidas, opiniões, sugestões e experiências, postem nos comentários!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2011-09-08 00:46:47</wp:post_date>
		<wp:post_date_gmt>2011-09-08 00:46:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programando-em-python-no-idle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="editor"><![CDATA[editor]]></category>
		<category domain="category" nicename="ferramentas"><![CDATA[Ferramentas]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[ide]]></category>
		<category domain="post_tag" nicename="idle"><![CDATA[idle]]></category>
		<category domain="category" nicename="iniciante"><![CDATA[Iniciante]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Como começar a programar em Python e utilizar o IDLE, uma IDE que já vem instalado com Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[IDLE, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Programando em Python no IDLE]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:2;s:8:"facebook";i:1;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228556]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[82]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[idle]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Afonsojr]]></wp:comment_author>
			<wp:comment_author_email>d4rk4ng3lfrd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.80.111.187</wp:comment_author_IP>
			<wp:comment_date>2011-09-17 02:23:03</wp:comment_date>
			<wp:comment_date_gmt>2011-09-17 02:23:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pow uma alternativa ao IDLE e que gosto muito é o DreamPie, tem bastantes recursos!!

[]'s
Afonso Jr]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648421]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Programando em Python no Vim</title>
		<link>http://www.pythonize.org/programando-em-python-no-vim/</link>
		<pubDate>Thu, 08 Sep 2011 14:45:20 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[No Linux, um bom editor para código Python é o Vim. Costumo usar o Vim no Ubuntu e tem sido uma boa experiência. O Vim pode ser instalado também no Windows e é um bom substituto para o IDLE. Você pode fazer o download da versão para Windows no <a href="http://www.vim.org/download.php#pc">site do Vim</a>. Versões recentes do Vim possuem suporte para Python nativo. <!--more-->Para ter certeza disso abra o Vim e digite <em>:python print “hello world”</em> (com dois pontos antes da palavra python). No Windows isso vai funcionar com o gVim.

O gVim já tem auto-identação e highlighting pra Python. Para ter o code completion no Vim é necessário ter um plugin instalado. Na versão 7.3 para Windows o omni completion já veio disponível, para testar bastar digitar ctrl+x e ctrl+o, que vai abrir uma janela dropdown com diversas opções. No Linux, para habilitar o omni completion, adicione a seguinte linha no arquivo /etc/vim/vimrc:

autocmd FileType python set omnifunc=pythoncomplete#Complete

Outras funções interessantes que podem ser adicionadas ao Vim para codificação Python podem ser vistas em: <a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/">VIM as Python IDE</a>.

Update (17/02/12): Escrevemos  um post mais completo sobre como utilizar o <a title="Vim como IDE pra Python" href="http://www.pythonize.org/tornando-o-vim-uma-ide-amigavel-pra-python/">Vim como IDE pra Python</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2011-09-08 14:45:20</wp:post_date>
		<wp:post_date_gmt>2011-09-08 14:45:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programando-em-python-no-vim</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ferramentas"><![CDATA[Ferramentas]]></category>
		<category domain="post_tag" nicename="gvim"><![CDATA[gvim]]></category>
		<category domain="category" nicename="iniciante"><![CDATA[Iniciante]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="programacao-2"><![CDATA[programação]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial sobre como programar e escrever seu código Python no Vim]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[vim, python, desenvolvimento python, programação]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Programando em Python no Vim]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:2;s:8:"facebook";i:1;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3046447455]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Tornando o Vim uma IDE amigável pra Python | Pythonize]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pythonize.org/tornando-o-vim-uma-ide-amigavel-pra-python/</wp:comment_author_url>
			<wp:comment_author_IP>173.193.26.73</wp:comment_author_IP>
			<wp:comment_date>2012-01-10 13:44:58</wp:comment_date>
			<wp:comment_date_gmt>2012-01-10 13:44:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 10 2012 Publicado por andersonberg em Ferramentas, Programação, Tutorial       Em um post anterior eu falei sobre como habilitar o auto-complete no vim pra código em python. Recentemente encontrei [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Introdução à programação em Cython</title>
		<link>http://www.pythonize.org/introducao-a-programacao-em-cython/</link>
		<pubDate>Sat, 10 Sep 2011 03:20:23 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center;"><a href="http://www.cython.org"><img class="aligncenter size-full wp-image-122" title="Cython-logo.svg" alt="" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/Cython-logo.svg_1.png" width="134" height="60" /></a></p>
<p style="text-align: left;">Quando o seu programa exige muita velocidade, não tem jeito, o código tem que ser escrito em C. Mas todo programador sabe o quão penoso pode ser programar em C e os diversos problemas que podem surgir no seu código contribuindo com o atraso na entrega do programa final. E porque não juntar a facilidade de programar em Python com a rapidez de execução de C? <!--more-->Essa é a proposta do Cython, uma extensão Python que permite que sejam utilizados tipos de C dentro do código Python.</p>

<h3>INSTALAÇÃO</h3>
O primeiro passo é a instalação. Você pode instalar o Cython através do setuptools, digitando, na linha de comando:

$ easy_install cython

Esse comando funciona tanto na linha de comando no Linux, quanto no prompt do Windows.

Se você não tem instalado o setuptools no Linux basta procurar pelo pacote homônimo e instalá-lo. No Windows, basta baixar o executável, na <a href="http://pypi.python.org/pypi/setuptools#windows">página do pacote</a> e instalar.

Uma alternativa é baixar o Cython no <a href="http://www.cython.org">site</a>, extrair os arquivos e fazer na linha de comando:

$ python setup.py install

Dica do <a href="http://frsoares.wordpress.com/">Francisco</a>:

Em sistemas Debian e derivados, é possível instalar o cython pelo apt-get:

$ sudo apt-get install cython
<h3>TUTORIAL</h3>
Para utilizar Cython em seu código, é preciso primeiro criar um arquivo com extenção .pyx. Para um primeiro teste crie um arquivo chamado helloworld.pyx e escreva a seguinte linha:

[sourcecode language="python"]

print "Hello World"

[/sourcecode]

Em seguida, crie um arquivo chamado setup.py que tenha o seguinte conteúdo:

[sourcecode language="python"]
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
    cmdclass = {'build_ext': build_ext},
    ext_modules = [Extension("helloworld", ["helloworld.pyx"])]
)
[/sourcecode]

Então, basta compilar utilizando o seguinte comando:

$ python setup.py build_ext --inplace

Depois é só entrar no interpretador e importar o módulo criado:

&gt;&gt;&gt; import helloworld
Hello World

Vamos avançar e criar um código que realmente tenha tipos de dados de C. Vamos criar uma função que retorne todos os números primos de 1 até um limite passado como parâmetro e salvar num arquivo chamado primes.pyx:

[sourcecode language="python"]
def primes(int kmax):
    cdef int n, k, i
    cdef int p[1000]
    result = []
    if kmax > 1000:
        kmax = 1000
    k = 0
    n = 2
    while k < kmax:
        i = 0
        while i < k and n % p[i] != 0:
            i = i + 1
        if i == k:
            p[k] = n
            k = k + 1
            result.append(n)
        n = n + 1
    return result
[/sourcecode]

Para declarar tipos C, você deve usar <em>cdef </em>e informar o tipo de dado, como nas linhas 2 e 3. Na linha 3, como qualquer array em C, deve ser informado o tamanho do array.

Nas linha 9 e 11 é que aparece o ganho no desempenho, a iteração dos blocos <em>while</em> é feita com tipos C, que torna a execução mais rápida.

Feito isso, basta criar o arquivo setup.py, como no exemplo anterior:

[sourcecode language="python"]
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
    cmdclass = {'build_ext'},
    ext_modules = [Extension("primes", ["primes.pyx"])]
)
[/sourcecode]

E compilar com o comando:

$ python setup.py build_ext --inplace]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2011-09-10 03:20:23</wp:post_date>
		<wp:post_date_gmt>2011-09-10 03:20:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducao-a-programacao-em-cython</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="cython"><![CDATA[cython]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="setuptools"><![CDATA[setuptools]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial sobre programação em Cython, incluindo instalação e exemplos.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[cython, python, linux, windows, c, setuptools]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Introdução à programação em Cython]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:2;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228795]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Francisco]]></wp:comment_author>
			<wp:comment_author_email>chicaoiskemia@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://frsoares.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>189.1.31.164</wp:comment_author_IP>
			<wp:comment_date>2011-09-10 15:44:40</wp:comment_date>
			<wp:comment_date_gmt>2011-09-10 15:44:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ótimo post, Berg. Só duas coisas a acrescentar: 

- no Ubuntu pude instalar o Cython com o comando "sudo apt-get install cython", o que acho que seria interessante incluires nas formas de instalação, já que deve ser possível fazê-lo em qualquer Debian; 
- acredito que falta um detalhe nos arquivos setup.py, que quando testei não funcionaram aqui. A variável cmdclass precisaria ser definida como {'build_ext': build_ext}, e não somente {'build_ext'}.

[]'s]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649060]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[absd]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.112.14.214</wp:comment_author_IP>
			<wp:comment_date>2011-09-10 20:59:18</wp:comment_date>
			<wp:comment_date_gmt>2011-09-10 20:59:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Valeu, Francisco. Foi erro meu mesmo, já corrigi o código.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649059]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Transformando seu Código Python em Executável com o py2exe</title>
		<link>http://www.pythonize.org/transformando-seu-codigo-python-em-executavel-com-o-py2exe/</link>
		<pubDate>Wed, 14 Sep 2011 19:58:12 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/executable.png"><img class="aligncenter size-full wp-image-661" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/executable.png" alt="executable" width="507" height="512" /></a>

Em diversas situações é necessário criar um arquivo executável a partir do seu código. Às vezes é preciso entregar um programa a um cliente que não tem Python instalado ou não tem as diversas bibliotecas que você usou pra criar sua aplicação. Ou até mesmo no caso de você querer usar o seu programa em qualquer outra máquina Windows sem precisar da instalação do Python. <!--more-->Neste post vamos fazer um tutorial sobre como fazer isso utilizando o <a href="http://www.py2exe.org">py2exe</a>.

<h3>INSTALAÇÃO DO PY2EXE</h3>

O primeiro passo é instalar o py2exe. Pra isso basta ir ao <a href="http://sourceforge.net/projects/py2exe/files/">site</a> e baixar a última versão. Baixe a versão para o seu Windows (32 ou 64 bits) e de acordo com a versão do python (2.5, 2.6, 2.7...).  A instalação é simples e padrão. Após a instalação adicione a pasta de scripts ao PATH do sistema, geralmente C:\Python27\Scripts.

<h3>TUTORIAL</h3>

Primeiro vamos escrever um código qualquer em Python. Você pode escrever um código importando qualquer pacote, desde que este esteja instalado no seu sistema. Para este exemplo você pode escrever seu próprio código, eu vou dar um simples exemplo utilizando a biblioteca matemática do Python, crie um arquivo em qualquer pasta chamado calc.py e escreva o seguinte código:

https://gist.github.com/andersonberg/8b132f80e485f52a7748

Teste o seu código:

C:\Pythonize&gt; python calc.py

O segundo passo é criar um script de setup. Crie um arquivo chamado setup_calc.py na mesma pasta que você salvou o código anterior e escreva este código:

https://gist.github.com/andersonberg/ee0eb3c57b62fd627097

Pronto, para criar seu arquivo executável, rode seu script:

C:\Pythonize&gt; python setup_calc.py py2exe

Serão criadas duas pastas: build e dist. A pasta build é usada somente para compilar o código e criar o executável e pode ser excluída após o término do processo. A pasta dist contém os arquivos necessários para rodar sua aplicação. Agora você pode testar seu executável:

https://gist.github.com/andersonberg/eecc2cb9fc37142418c7

Funcionando muito bem!

Se você quer distribuir seu programa e levar para outro computador Windows, é preciso levar toda a pasta dist para que sua aplicação funcione corretamente. Para outras informações, veja o <a href="http://www.py2exe.org/index.cgi/Tutorial">tutorial do py2exe</a>.

Para utilizar o py2exe com outros pacotes e módulos, veja o link: <a href="http://www.py2exe.org/index.cgi/WorkingWithVariousPackagesAndModules">Working with Various Packages and Modules</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2011-09-14 19:58:12</wp:post_date>
		<wp:post_date_gmt>2011-09-14 19:58:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>transformando-seu-codigo-python-em-executavel-com-o-py2exe</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="executavel"><![CDATA[executável]]></category>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<category domain="post_tag" nicename="py2exe"><![CDATA[py2exe]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[py2exe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Crie um executável a partir do seu código Python utilizando o pacote py2exe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[py2exe, executável, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Transformando seu Código em Executável com o py2exe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:1;s:8:"facebook";i:14;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228578]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[Isaac]]></wp:comment_author>
			<wp:comment_author_email>isaacorricomkt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.104.245.220</wp:comment_author_IP>
			<wp:comment_date>2012-06-25 22:56:11</wp:comment_date>
			<wp:comment_date_gmt>2012-06-26 01:56:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[E se eu tiver um programa todo modular que depende dos módulos para rodar perfeitamente é possível unir e compilar todos eles?

Será que vai entender minha pergunta?

Valew...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648431]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.17.5.174</wp:comment_author_IP>
			<wp:comment_date>2012-06-26 10:11:02</wp:comment_date>
			<wp:comment_date_gmt>2012-06-26 13:11:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mesmo tendo um programa modularizado, um dos seus módulo vai ser o principal. Este vai conter um "main" e a partir dele vc vai chamar as funcionalidades dos outros módulos. Então no seu arquivo de configuração vc só vai referenciar esse módulo principal, o py2exe vai ver q o módulo principal necessita de outros módulos e vai compilar tudo junto criando um executável.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>143</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648431]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649044]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Entendendo Decorators de forma simples</title>
		<link>http://www.pythonize.org/entendendo-decorators-de-forma-simples/</link>
		<pubDate>Mon, 24 Oct 2011 00:58:57 +0000</pubDate>
		<dc:creator><![CDATA[romulo]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><strong>O que é quando usar um decorator:</strong></h1>
Sabe aquele trecho de código que vive se repetindo no seu código e você acha um saco ter repetir? Imagine que esse trecho repetido necessite uma refatoração e imagine que seu projeto é grande você já começa a vislumbrar um cenário caótico.<!--more-->

As boas práticas de programação tentam prevenir este tipo de problema. Mas tem horas que nem o seu mega modelo resolve. Um caso simples é quando o trecho de código que se repete necessita de parametrização ou muda de acordo com o contexto.

Decorators são uma tentativa de "economizar" código, manter a sanidade e as boas práticas de programação. Ok, eu sei que a razão principal de um decorator não é essa. Dá uma passada na <a title="PEP 318 - Decorators for Functions and Methods " href="http://www.python.org/dev/peps/pep-0318/" target="_blank">PEP</a> para descobrir mais. O lance é meio inception. Então eu curto a minha explicação... ;)

Então, se você viu um @ em cima de um método no código. Parabéns, você já sabe o que é um decorator e provavelmente já utiliza.
<h1><strong>Criando um decorator:</strong></h1>
- "mas eu quero criar um decorator"

Ok. Para fazer isso é simples:

Defina um método cujo o parametro será a assinatura de uma função decorada.

Então brinque com a função e retorne a função ou outra função. Lindo não? (se lembra que eu disse que era meio inception?)

Mas o decorator é isso mesmo. É um cara que vai pegar sua função bonitinha é modifica-la. Ou mesmo desfigura-la. Vou mostrar como cria um decorator brincando.

Suponha que você criou uma função de somar:

[sourcecode language="python"]
def sum(a,b)
  return a+b
[/sourcecode]

Função linda! Bom agora vou bagunçar a vida do cidadão que usa essa função e fazer que a soma seja a - b. Mas eu não quero perder o código original. Isto é um trabalho para o decorador:

[sourcecode language="python"]
def bagunca(funcao):
  def subtrai(a,b):
   return a-b
 return subtrai

@bagunca
def sum(a,b):
  return a+b
[/sourcecode]

Bom, agora deixo com vocês executarem o código no terminal e compreende que aconteceu com a função sum. Acredito que desta forma você compreenderá o uso do decorator.

até a próxima,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2011-10-24 00:58:57</wp:post_date>
		<wp:post_date_gmt>2011-10-24 00:58:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entendendo-decorators-de-forma-simples</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="decorador"><![CDATA[decorador]]></category>
		<category domain="post_tag" nicename="decorators"><![CDATA[decorators]]></category>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[De forma simples o que é e como criar um decorator]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[decorator, python, tutorial, decorators]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Entendendo Decorators de forma simples]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:4;s:10:"googleplus";i:0;s:8:"linkedin";i:1;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3053378814]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Tutorial básico de NumPy</title>
		<link>http://www.pythonize.org/tutorial-basico-de-numpy/</link>
		<pubDate>Tue, 25 Oct 2011 17:00:38 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[NumPy é um pacote de Python que  suporta operações com vetores e matrizes e é essencial para a computação científica com Python. O NumPy é baseado em C, portanto tem um desempenho superior se comparado às operações com vetores originais do Python. Neste post eu quero mostrar uma introdução básica ao NumPy para os iniciantes.<!--more-->

<h3>INSTALAÇÃO DO NUMPY</h3>

Primeiro vamos instalar o NumPy. No Windows, basta baixar a última versão do numpy no site do <a title="Numpy Sourceforge download" href="http://sourceforge.net/projects/numpy/files/NumPy/" target="_blank">SourceForge</a> e instalar facilmente com o arquivo .exe. No Linux, instale o pacote "python-numpy" ou mesmo usando o <em>easy_install numpy</em>.

Pronto, agora é só abrir o console Python e importar o pacote:

https://gist.github.com/andersonberg/c94c9af5feea2518c153

<h3>CRIAÇÃO DE UM ARRAY NUMPY</h3>

Para criar um array, é bem simples:

https://gist.github.com/andersonberg/348c29e536e2b45e8d3a

A função <em>array</em> do NumPy, recebe uma lista de Python e transforma em um array NumPy. Você pode checar o tipo:

https://gist.github.com/andersonberg/96d12f089538c25de72c

E o tipo dos elementos:

https://gist.github.com/andersonberg/0e81914d1c63b28a67c1

Para criar matrizes multidimensionais é bem simples também:

https://gist.github.com/andersonberg/fd8104a1aa3869ad52af

A função <em>arange</em> é bem parecida com a função <em>range</em>, só que retorna um array ao invés de uma lista:

https://gist.github.com/andersonberg/9759f09b955c774e7b87

É possível definir mais parâmetros pra função <em>arange</em>:

https://gist.github.com/andersonberg/a9e8b5f66eb3c60ea9bd

<h3>TAMANHO DO ARRAY</h3>

A propriedade <em>shape</em> mostra o tamanho de cada dimensão da matriz:

https://gist.github.com/andersonberg/2addce8322063a505cc9

É possível, também, modificar essa propriedade:

https://gist.github.com/andersonberg/35f8cccd5b0e6a14f887

<h3>ACESSANDO ELEMENTOS</h3>

Para acessar elementos:

https://gist.github.com/andersonberg/9f29b1112b5895416b0d

É possível acessar vários elementos ao mesmo tempo:

<span style="color: #ff9900;">&gt;&gt;&gt; a[0,3:5]</span>

[caption id="attachment_175" align="alignright" width="300"]<img class="wp-image-175 size-medium" title="matriz" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/10/matriz-300x294.jpg" alt="acessando matriz em numpy" width="300" height="294" /> Fonte: SciPy 2011 - Jonathan Rocher[/caption]

<span style="color: #ff9900;"> array([3, 4])</span>

<span style="color: #0000ff;">&gt;&gt;&gt; a[4:,4:]</span>
<span style="color: #0000ff;"> array([[44, 45],</span>
<span style="color: #0000ff;"> [54, 55]])</span>

<span style="color: #ff0000;">&gt;&gt;&gt; a[:,2]</span>
<span style="color: #ff0000;"> array([2,12,22,32,42,52])</span>

<span style="color: #008000;">&gt;&gt;&gt; a[2::2,::2]</span>
<span style="color: #008000;"> array([[20, 22, 24],</span>
<span style="color: #008000;"> [40, 42, 44]])</span>

<h3>MATRIZ TRANSPOSTA</h3>

Para obter a matriz transposta existem duas formas:

https://gist.github.com/andersonberg/aa7d94d597b47540a57d

<h3>OUTRAS FUNÇÕES IMPORTANTES DO NUMPY</h3>

A função <em>sum</em> soma todos os elementos do array:

https://gist.github.com/andersonberg/a4a8c6f0730d48acb7ec

Podemos usar o parâmetro axis e determinar em qual eixo queremos a soma:

https://gist.github.com/andersonberg/a5aa08c637ace85cbb4f

Alternativamente, podemos usar o método <em>sum</em>:

https://gist.github.com/andersonberg/20db6c78dc281cfa32ef

As funções amin e amax retornam o valor mínimo e o valor máximo do array, respectivamente:

https://gist.github.com/andersonberg/9d94a1962d43b7482bb0

<em>argmin</em> e <em>argmax</em> retornam o índice do menor valor e do maior valor do array, respectivamente:

https://gist.github.com/andersonberg/82ba7f1e50fc1a4d6bca

O atributo <em>flat</em> retorna um iterator que permite acessar elementos de um array multidimensional como se ele fosse uma lista:

https://gist.github.com/andersonberg/f2faec6a86fc98de120b

Existem ainda outras diversas funções que podemos explorar em outro post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2011-10-25 17:00:38</wp:post_date>
		<wp:post_date_gmt>2011-10-25 17:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tutorial-basico-de-numpy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="computacao_cientifica"><![CDATA[Computação Científica]]></category>
		<category domain="post_tag" nicename="numpy"><![CDATA[numpy]]></category>
		<category domain="post_tag" nicename="numpy-tutorial"><![CDATA[numpy tutorial]]></category>
		<category domain="post_tag" nicename="python-numpy"><![CDATA[python numpy]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[numpy, tutorial, programação]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial básico de NumPy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:3;s:8:"facebook";i:16;s:10:"googleplus";i:1;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228354]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[92]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[numpy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial simples para mostrar as principais funcionalidades do NumPy, biblioteca matemática de Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3189</wp:comment_id>
			<wp:comment_author><![CDATA[FILLIPE DOS SANTOS SILVA]]></wp:comment_author>
			<wp:comment_author_email>fillipe_santos@live.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com</wp:comment_author_url>
			<wp:comment_author_IP>201.4.86.196</wp:comment_author_IP>
			<wp:comment_date>2014-05-31 20:58:16</wp:comment_date>
			<wp:comment_date_gmt>2014-05-31 23:58:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muito bom!, vlw!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401580696.3040430545806884765625;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1401581251.8923308849334716796875;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600647801]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Palestra sobre canivete suíço de Python</title>
		<link>http://www.pythonize.org/palestra-sobre-canivete-suico-de-python/</link>
		<pubDate>Sun, 04 Dec 2011 03:32:34 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[Esta semana tive a oportunidade de ministrar uma palestra para os alunos da Farec (Faculdade do Recife) falando sobre o Python, incluindo biblioteca padrão, pacotes e frameworks úteis para todo tipo de projeto. Fiz um apanhado geral de Python para que os alunos se interessassem um pouco mais pela linguagem. A seguir estão os slides:<!--more-->

<div id="__ss_10451349" style="width: 425px;"><strong style="display: block; margin: 12px 0 4px;"><a title="Canivete python" href="http://www.slideshare.net/berg_pe/canivete-python">Canivete python</a></strong><object id="__sse10451349" width="425" height="355" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="wmode" value="transparent" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=canivetepython-111203212452-phpapp01&amp;stripped_title=canivete-python&amp;userName=berg_pe" /><param name="allowscriptaccess" value="always" /><param name="allowfullscreen" value="true" /><embed id="__sse10451349" width="425" height="355" type="application/x-shockwave-flash" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=canivetepython-111203212452-phpapp01&amp;stripped_title=canivete-python&amp;userName=berg_pe" allowFullScreen="true" allowScriptAccess="always" wmode="transparent" allowscriptaccess="always" allowfullscreen="true" /></object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/berg_pe">Anderson Dantas</a>.</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date>2011-12-04 03:32:34</wp:post_date>
		<wp:post_date_gmt>2011-12-04 03:32:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>palestra-sobre-canivete-suico-de-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="category" nicename="iniciante"><![CDATA[Iniciante]]></category>
		<category domain="post_tag" nicename="numpy"><![CDATA[numpy]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="sqlite"><![CDATA[sqlite]]></category>
		<category domain="post_tag" nicename="tkinter"><![CDATA[tkinter]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3055277119]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Palestra motivacional sobre Python, ferramentas e frameworks.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[python, numpy, sqlite, tkinter, django]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Palestra sobre canivete suíço de Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:9;s:10:"googleplus";i:1;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Slides da Palestra de Python para os alunos da FAREC (Faculdade do Recife) &laquo; PUG-PE]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pugpe.wordpress.com/2011/12/06/slides-python-faculdade-recife/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.19</wp:comment_author_IP>
			<wp:comment_date>2011-12-06 03:28:03</wp:comment_date>
			<wp:comment_date_gmt>2011-12-06 03:28:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] trabalho e pela divulgação da plataforma nas faculdades do Recife!  Mais informações no seu blog.  Equipe PUG-PE  Like this:LikeBe the first to like this [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Como criar parsers HTML com BeautifulSoup</title>
		<link>http://www.pythonize.org/parser-html-com-beautifulsoup/</link>
		<pubDate>Sat, 31 Dec 2011 15:45:19 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2011/12/beautifulsoup.jpg"><img class="aligncenter wp-image-564 size-full" src="http://www.pythonize.org/wordpress/wp-content/uploads/2011/12/beautifulsoup.jpg" alt="beautifulsoup" width="250" height="298" /></a>

Neste post vamos aprender a como criar um parser pra recuperar informações de páginas HTML utilizando o BeautifulSoup. O BeautifulSoup pode ser usado para arquivos HTML ou XML, com ele fica muito simples navegar e buscar textos em páginas HTML. Uma grande vantagem da BeautifulSoup é que ela consegue criar uma estrutura mesmo com páginas html mal formatadas, facilitando o trabalho do programador.<!--more-->

<h2>Instalando o BeautifulSoup</h2>

Você pode fazer a instalação via <em>pip</em> ou <em>easy_install. </em>Também estão disponíveis pacotes em diferentes distribuições Linux.

Inicie o interpretador Python para testar os códigos que vamos apresentar a seguir.

Para processar páginas HTML, importe o BeautifulSoup da seguinte forma:

https://gist.github.com/andersonberg/c2d8c227153541df306d

Se você for processar arquivos XML:

https://gist.github.com/andersonberg/c5b6de3b6abb25c404b0

Você pode também consultar a documentação do BeautifulSoup <a title="BeautifulSoup" href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">aqui</a>.

<h2>Criando o parser</h2>

Por enquanto vamos processar apenas páginas html.
Vamos usar a biblioteca urllib2 para recuperar uma página html.

https://gist.github.com/andersonberg/52c3e794f38d20e793c4

Isso vai criar uma string com todo o código html da página.
Então, para criar o parser basta:

https://gist.github.com/andersonberg/3b0882c5e0365e85f241

É possível transformar esse objeto BeautifulSoup em string com o método prettify, que manipula o código bruto adicionando quebra de linha e espaçamento recriando a estrutura do código html.

https://gist.github.com/andersonberg/8464000f8ee93b4bc54c

Para listar todos os links da página recuperada, usamos o método findAll:

https://gist.github.com/andersonberg/ab2500a386d8100ec90b

Neste código, '<em>links</em>' é uma lista contendo objetos do tipo Tag da biblioteca BeautifulSoup (class BeautifulSoup.Tag). Vamos agora, listar somente os links (tirando qualquer texto ou marcação) que estão nesses objetos Tag:

https://gist.github.com/andersonberg/4475fccc9cd585c12146

Para recuperar somente uma área da página, é possível usar o método find com o parâmetro id, por exemplo:

https://gist.github.com/andersonberg/b321c3ce7c0d7eee15cf

A biblioteca BeautifulSoup facilita muito na hora de criar parsers e crawlers para páginas html ou xml. Usada junto com o urllib2 são poderosos aliados na recuperação de informação na web.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2011-12-31 15:45:19</wp:post_date>
		<wp:post_date_gmt>2011-12-31 15:45:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parser-html-com-beautifulsoup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="beautifulsoup"><![CDATA[beautifulsoup]]></category>
		<category domain="post_tag" nicename="crawler-python"><![CDATA[crawler python]]></category>
		<category domain="post_tag" nicename="parser-python"><![CDATA[parser python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python-web"><![CDATA[python web]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[parser-pra-paginas-html-com-beautifulsoup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[criando-um-crawler-pra-paginas-html-com-beautifulsoup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[beautifulsoup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial simples para criar parsers e crawlers para recuperar informações de páginas html usando Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[crawler, python, beautifulsoup, parser, html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Como criar parsers HTML com BeautifulSoup]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:0;s:10:"googleplus";i:1;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3044093201]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>6 dicas simples para o Vim ser uma IDE perfeita pra Python</title>
		<link>http://www.pythonize.org/vim-uma-ide-amigavel-pra-python/</link>
		<pubDate>Tue, 10 Jan 2012 13:43:24 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pythonize.org/vim-uma-ide-amigavel-pra-python"><img class="aligncenter wp-image-536 size-full" src="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/unixstickers.jpg" alt="unix stickers" width="599" height="454" /></a>

Qual programador não procura um ambiente de desenvolvimento que seja <strong>simples</strong>, <strong>amigável</strong> e <strong>funcional</strong>?

Muitos acabam voltando ao bloco de notas por sua <strong>simplicidade</strong>.

Neste post você vai explorar o Vim, um editor de texto que roda na linha de comando e é a paixão de muitos desenvolvedores.

<!--more-->

Em um <a title="Programando em Python no Vim" href="http://www.pythonize.org/programando-em-python-no-vim/" target="_blank">post anterior</a> eu falei sobre como habilitar o auto-complete no vim pra código em python. Neste post vamos um pouco mais além nessas configurações

Recentemente encontrei um <a href="http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/" target="_blank">post num blog</a> com dicas mostrando como tornar o vim numa IDE completa pra Python.

Testei algumas funcionalidades que tornaram o vim bem amigável pra programar e gerenciar código. Fiz todos os testes no Ubuntu, em outros sistemas Linux deve ser similar. Neste post vou passar essa experiência que tive configurando e usando o vim para criar código python.

Antes de tudo, instale os pacotes vim-full e vim-python se estiverem disponíveis nos repositórios do seu sistema. As configuração no vim são feitas num arquivo chamado vimrc, nas últimas versões do Ubuntu ele fica localizado na pasta /etc/vim e precisa ser root para modificá-lo.

<h3>1. Destaque de código no Vim</h3>

Para habilitar highlighting (destaque do código) no vim adicione a seguinte linha no arquivo vimrc:

https://gist.github.com/andersonberg/671092183bfa673facd4

No seu arquivo vimrc pode ser que esta linha venha comentada e acompanhada das seguintes linhas:

https://gist.github.com/andersonberg/5d0d93571451396f0fff

Basta descomentar estas linhas que o highlighting ficará disponível.

<h3>2. Indentação de código</h3>

Como a indentação em Python é fundamental, sem ela podem ocorrer erros no código, uma ide que  tenha auto-indentação é ideal.  No arquivo vimrc procure as seguintes linhas e descomente ou adicione se elas já não estiverem no arquivo:

https://gist.github.com/andersonberg/d9dbcb8a5c4534850b91

<h3>3. Número de linhas</h3>

Para exibir o número das linhas no vim adicione o seguinte no vimrc:

https://gist.github.com/andersonberg/09fa173355f0f4727946

[caption id="attachment_314" align="aligncenter" width="372"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vimpython.jpg"><img class="size-full wp-image-314" title="vimpython" src="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vimpython.jpg" alt="Vim com highlighting para Python e número de linhas" width="372" height="118" /></a> Vim com highlighting para Python e número de linhas[/caption]

<pre></pre>

<h3>4. Navegação pelo código</h3>

Uma funcionalidade muito útil é a navegação pelo código. Com esta ferramenta habilitada é possível ver todas as classes e funções presentes no seu código e poder pular automaticamente pra qualquer uma delas.

Primeiro, é preciso instalar o pacote <a href="http://ctags.sourceforge.net/">exuberant-ctags</a>, disponível no repositório com este mesmo nome. Depois, baixe o <a href="http://www.vim.org/scripts/script.php?script_id=273" target="_blank">taglist</a>, que é um plugin do vim. Coloque o arquivo taglist.vim na pasta ~/.vim/plugin e o taglist.txt na pasta ~/.vim/doc, vá até esta última pasta, inicie o vim e rode :helptags. (com '.' no final) e já estará instalado.

[caption id="attachment_316" align="aligncenter" width="648"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-explorer.jpg"><img class="  wp-image-316 size-large" title="vim explorer" src="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-explorer-1024x106.jpg" alt="Vim com code explorer" width="648" height="67" /></a> Code Explorer para o Vim[/caption]

Agora é preciso fazer algumas alterações no vimrc:

https://gist.github.com/andersonberg/472ab92c2f1568c66c2d

A Taglist estará disponível através do atalho F4 ou digitando "TT" (dois 't' maiúsculos)
As últimas configurações servem para exibir uma janela vertical à direita mostrando a taglist e ganhar foco quando é chamada.

<h3>5. Ocultar Código</h3>

Quando o seu código começa a ter muitas funções e classes fica difícil ter uma visão geral do que está disponível no código. A maioria das IDE's possuem uma funcionalidade para ocultar parte do código e mostrar somente a assinatura ou definição de classes e funções.

No Vim isso é possível através de um <a href="http://www.vim.org/scripts/script.php?script_id=1494">plugin</a>. Para instalá-lo baixe o arquivo <a href="http://www.vim.org/scripts/script.php?script_id=1494">neste link</a>, crie uma pasta chamada ftplugin dentro da pasta ~/.vim e copie o plugin para a pasta ftplugin. A tecla 'F' (&lt;Shift&gt; + f) oculta ou exibe todo o código dentro de funções e classes, enquanto que a tecla 'f'' exibe ou oculta o código onde está o cursor.

[caption id="attachment_322" align="aligncenter" width="573"]<a href="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-code-folding.jpg"><img class=" wp-image-322  " title="vim code folding" src="http://www.pythonize.org/wordpress/wp-content/uploads/2012/01/vim-code-folding-1024x148.jpg" alt="Ocultar código automaticamente no Vim" width="573" height="83" /></a> Ocultar código no Vim[/caption]

<h3>6. Project Explorer</h3>

Essa é uma das principais funções de uma IDE: organizar seu projeto. No Vim é preciso instalar o plugin <a href="http://www.vim.org/scripts/script.php?script_id=1658">NerdTree</a>, que pode ser baixado <a href="http://www.vim.org/scripts/script.php?script_id=1658">aqui</a>. Para instalar basta extrair o conteúdo do arquivo .zip na pasta ~/.vim. Rode  :helptags. (com '.' no final) e rode :help NERD_tree.txt para ver o arquivo de ajuda. Pra utilizar o plugin digite :NERDTree e será aberta uma janela com o conteúdo da pasta atual.

Na <a href="http://www.vim.org/scripts/index.php">página de scripts</a> do vim, você pode encontrar outros plugins de Python para o vim. Se você testar algum outro plugin ou tiver uma funcionalidade interessante que eu não comentei no post, deixe sua experiência nos comentários.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2012-01-10 13:43:24</wp:post_date>
		<wp:post_date_gmt>2012-01-10 13:43:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-uma-ide-amigavel-pra-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ferramentas"><![CDATA[Ferramentas]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[ide]]></category>
		<category domain="post_tag" nicename="ide-python"><![CDATA[ide python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<category domain="post_tag" nicename="vim-python"><![CDATA[vim python]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[tornando-o-vim-uma-ide-amigavel-pra-python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[vim]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Tutorial com 6 dicas simples para configurar o editor de textos vim com diversos plugins úteis tornando uma IDE perfeita para programar em Python.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[vim, ide, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[6 dicas simples para o Vim ser uma IDE perfeita pra Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:3;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043228774]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Programando em Python no Vim | Pythonize]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pythonize.org/programando-em-python-no-vim/</wp:comment_author_url>
			<wp:comment_author_IP>173.193.26.73</wp:comment_author_IP>
			<wp:comment_date>2012-02-17 14:02:11</wp:comment_date>
			<wp:comment_date_gmt>2012-02-17 14:02:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (17/02): Escrevemos  um post mais completo sobre como utilizar o Vim como IDE pra Python.    Compartilhar isto:EmailFacebookDigg Tags: gvim, linux, programação, python, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3005</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>179.185.12.194</wp:comment_author_IP>
			<wp:comment_date>2013-11-05 10:29:29</wp:comment_date>
			<wp:comment_date_gmt>2013-11-05 13:29:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Obrigado pelos esclarecimentos, Jesse!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2832</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383658172.2553379535675048828125;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649200]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649483]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3006</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>179.185.12.194</wp:comment_author_IP>
			<wp:comment_date>2013-11-05 10:30:03</wp:comment_date>
			<wp:comment_date_gmt>2013-11-05 13:30:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Obrigado! O comentário seguinte respondeu suas dúvidas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2816</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1383658203.891971111297607421875;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649049]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649052]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2816</wp:comment_id>
			<wp:comment_author><![CDATA[Limão]]></wp:comment_author>
			<wp:comment_author_email>rlimaoc@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.111.65.93</wp:comment_author_IP>
			<wp:comment_date>2013-09-28 14:27:54</wp:comment_date>
			<wp:comment_date_gmt>2013-09-28 17:27:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anderson, parabéns pelo post. Me ajudou muito a configruar o VIM para trabalhar não só com Python, mas com outras linguagens... eu gostaria de saber se você pode me ajudar com duas dicas:

#1 É possível eu criar minhas teclas de atalho para trabalhar com o VIM do meu jeito?! Acredito que sim, mas alguns comandos não soube como fazer;

#2 É possível eu criar meus plugins?! Pergunto isso pois participo de um projeto em xHarbour com codificação OEM  e para isso eu tenho uma VM com Win XP. Mas gostaria de trabalhar apenas com meu Ubuntu Studio.

Desde já agradeço.

Abs, RLC]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380389274.5407950878143310546875;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380389429.3648130893707275390625;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649049]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3033</wp:comment_id>
			<wp:comment_author><![CDATA[Nina]]></wp:comment_author>
			<wp:comment_author_email>ludfakemila@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.32.11.105</wp:comment_author_IP>
			<wp:comment_date>2013-11-13 22:37:44</wp:comment_date>
			<wp:comment_date_gmt>2013-11-14 01:37:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fiz tudo o que vc mostrou e ficou redondinho, bem util
valeu]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384393064.281752109527587890625;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384393144.31754207611083984375;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649051]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3034</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.17.107.94</wp:comment_author_IP>
			<wp:comment_date>2013-11-13 22:40:27</wp:comment_date>
			<wp:comment_date_gmt>2013-11-14 01:40:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Obrigado pelo feedback! Estamos aí pra ajudar.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3033</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1384393227.513597965240478515625;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649051]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649199]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2832</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse]]></wp:comment_author>
			<wp:comment_author_email>jessenzr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.2.62.59</wp:comment_author_IP>
			<wp:comment_date>2013-09-30 10:17:28</wp:comment_date>
			<wp:comment_date_gmt>2013-09-30 13:17:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1. Sim. É bem simples personalizar seus atalhos no vim. Vc faz isso com os comandos
noremap (todos os modos), nnoremap (apenas modo normal), inoremap (apenas modo de insercao) e vnoremap (apemas modo visual).

2. Sim. Ja criei alguns. Basicamente vc coloca um arquivo em vimscript na pasta ~/.vim/plugin/ e seu plugin ta feito. So precisa aprender a programar em vimscript, o que e bastante simples. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2816</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380547048.628489971160888671875;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380644887.5628869533538818359375;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649049]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649200]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Python WSGI</title>
		<link>http://www.pythonize.org/?p=286</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[romulo]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>O que é WSGI?</h1>
Web Server Gateway Interface. É amigo, esse post serviu para abrir a sigla. #not!

WSGI é uma interface que faz o meio campo entre um webserver (<a href="http://projects.apache.org/projects/http_server.html" target="_blank">APACHE</a>, <a href="http://nginx.org/" target="_blank">NGINX</a>) e uma, ou mais, aplicacação web. Seja ela um python puro ou algo baseado em um framework (<a href="http://www.djangoproject.com" target="_blank">DJANGO</a>). Você pode ler a descrição completa na <a href="http://www.python.org/dev/peps/pep-0333/" target="_blank">PEP-0333</a> ou para o python 3 <a href="http://www.python.org/dev/peps/pep-3333/" target="_blank">PEP-3333</a>.

Bom mas o que realmente o WSGI é, ou faz?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2012-01-05 02:08:51</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Para que servem YIELD &amp; WITH?</title>
		<link>http://www.pythonize.org/?p=291</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[romulo]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=291</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date>2012-01-05 02:55:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Home</title>
		<link>http://www.pythonize.org/home/</link>
		<pubDate>Wed, 06 Nov 2013 17:02:36 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=464</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2013-11-06 14:02:36</wp:post_date>
		<wp:post_date_gmt>2013-11-06 17:02:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="menu-1"><![CDATA[Menu 1]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[464]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.pythonize.org/]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>http://www.pythonize.org/465/</link>
		<pubDate>Wed, 06 Nov 2013 17:02:36 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2013-11-06 14:02:36</wp:post_date>
		<wp:post_date_gmt>2013-11-06 17:02:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>465</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="menu-1"><![CDATA[Menu 1]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title></title>
		<link>http://www.pythonize.org/466/</link>
		<pubDate>Wed, 06 Nov 2013 17:02:36 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2013-11-06 14:02:36</wp:post_date>
		<wp:post_date_gmt>2013-11-06 17:02:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>466</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="menu-1"><![CDATA[Menu 1]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Cloud Word</title>
		<link>http://www.pythonize.org/criar-api-rest-python/cloud-1/</link>
		<pubDate>Mon, 06 Oct 2014 16:04:58 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2014/10/Cloud-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date>2014-10-06 13:04:58</wp:post_date>
		<wp:post_date_gmt>2014-10-06 16:04:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cloud-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>577</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2014/10/Cloud-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Cloud Words]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/10/Cloud-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1000;s:6:"height";i:491;s:4:"file";s:19:"2014/10/Cloud-1.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:19:"Cloud-1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:31:"Reduced by 29.0% (12.8&nbsp;KB)";}s:6:"medium";a:5:{s:4:"file";s:19:"Cloud-1-300x147.png";s:5:"width";i:300;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:31:"Reduced by 29.7% (20.3&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:19:"Cloud-1-100x100.png";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 25.7% (5.8&nbsp;KB)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:19:"Cloud-1-336x336.png";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:31:"Reduced by 28.2% (44.2&nbsp;KB)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:19:"Cloud-1-300x200.png";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:31:"Reduced by 29.9% (29.5&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:31:"Reduced by 36.8% (75.5&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>executable</title>
		<link>http://www.pythonize.org/transformando-seu-codigo-python-em-executavel-com-o-py2exe/executable/</link>
		<pubDate>Fri, 24 Oct 2014 14:12:26 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/executable.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>661</wp:post_id>
		<wp:post_date>2014-10-24 11:12:26</wp:post_date>
		<wp:post_date_gmt>2014-10-24 14:12:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>executable</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>127</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.pythonize.org/wordpress/wp-content/uploads/2011/09/executable.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Executable file]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:507;s:6:"height";i:512;s:4:"file";s:22:"2011/09/executable.png";s:5:"sizes";a:5:{s:9:"thumbnail";a:5:{s:4:"file";s:22:"executable-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:27:"Reduced by 8.4% (1&nbsp;KB)";}s:6:"medium";a:5:{s:4:"file";s:22:"executable-297x300.png";s:5:"width";i:297;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 12.3% (4.6&nbsp;KB)";}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"executable-100x100.png";s:5:"width";i:100;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:29:"Reduced by 11.4% (804&nbsp;B)";}s:21:"single-post-thumbnail";a:5:{s:4:"file";s:22:"executable-336x336.png";s:5:"width";i:336;s:6:"height";i:336;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 13.2% (6.1&nbsp;KB)";}s:20:"portfolio-item-small";a:5:{s:4:"file";s:22:"executable-300x200.png";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";s:10:"wp_smushit";s:30:"Reduced by 14.2% (4.3&nbsp;KB)";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}s:10:"wp_smushit";s:30:"Reduced by 17.5% (6.3&nbsp;KB)";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/executable.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Passando uma função como parâmetro de outra função</title>
		<link>http://www.pythonize.org/passando-uma-funcao-como-parametro-de-outra-funcao/</link>
		<pubDate>Sat, 10 Sep 2011 00:27:01 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[Uma característica interessante que existe em várias linguagens de programação é a de poder passar uma função como parâmetro de outra função. Isso é muito útil pro caso de se ter diversas funções com a mesma assinatura e você pode criar uma função "padrão" que possa chamar qualquer dessas funções determinando simplesmente através de um parâmetro. Vamos a um exemplo em Python para entender melhor.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2011-09-09 21:27:01</wp:post_date>
		<wp:post_date_gmt>2011-09-10 00:27:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>passando-uma-funcao-como-parametro-de-outra-funcao</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1415541741]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Formulário de contato 1</title>
		<link>http://www.pythonize.org/?post_type=wpcf7_contact_form&#038;p=146</link>
		<pubDate>Sun, 18 Sep 2011 18:41:00 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/wpcf7_contact_form/formulario-de-contato-1/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Seu nome (obrigatório)<br />
    [text 1="your-name" language="*"][/text] </p>

<p>Seu e-mail (obrigatório)<br />
    [email* your-email] </p>

<p>Assunto<br />
    [text language="your-subject"][/text] </p>

<p>Sua mensagem<br />
    [textarea your-message] </p>

<p>[submit "Enviar"]</p>
[your-subject]
[your-name] <[your-email]>
De: [your-name] <[your-email]>
Assunto: [your-subject]

Corpo da mensagem: 
[your-message]

--
Este email foi enviado via formulário de contato em Pythonize http://www.pythonize.org
contato@pythonize.org




[your-subject]
[your-name] <[your-email]>
Corpo da mensagem:
[your-message]

--
Este email foi enviado via formulário de contato em Pythonize http://www.pythonize.org
[your-email]



Sua mensagem foi enviada com sucesso. Obrigado.
Falha ao enviar sua mensagem. Por favor tente mais tarde ou contacte o administrador de outra forma.
Falha ao enviar sua mensagem. Por favor tente mais tarde ou contacte o administrador de outra forma.
Ocorreram erros de validação. Por favor confira os dados e envie novamente.
Por favor aceite os termos para prosseguir.
O endereço de e-mail parece inválido.
Por favor preencha este campo obrigatório.
Sua resposta está incorreta.
Falha no upload do arquivo.
Este tipo de arquivo não é permitido.
Este arquivo é grande demais.
Falha no upload do arquivo.
O código digitado está incorreto.
Failed to send your message. Please try later or contact the administrator by another method.
Number format seems invalid.
This number is too small.
This number is too large.
URL seems invalid.
Telephone number seems invalid.
Date format seems invalid.
This date is too early.
This date is too late.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2011-09-18 18:41:00</wp:post_date>
		<wp:post_date_gmt>2011-09-18 18:41:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>formulario-de-contato-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>wpcf7_contact_form</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_mail</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:182:"De: [your-name] <[your-email]>
Assunto: [your-subject]

Corpo da mensagem: 
[your-message]

--
Este email foi enviado via formulário de contato em Pythonize http://www.pythonize.org";s:9:"recipient";s:21:"contato@pythonize.org";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";b:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_old_cf7_unit_id</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_mail_2</wp:meta_key>
			<wp:meta_value><![CDATA[a:8:{s:6:"active";b:0;s:7:"subject";s:14:"[your-subject]";s:6:"sender";s:26:"[your-name] <[your-email]>";s:4:"body";s:125:"Corpo da mensagem:
[your-message]

--
Este email foi enviado via formulário de contato em Pythonize http://www.pythonize.org";s:9:"recipient";s:12:"[your-email]";s:18:"additional_headers";s:0:"";s:11:"attachments";s:0:"";s:8:"use_html";b:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_messages</wp:meta_key>
			<wp:meta_value><![CDATA[a:22:{s:12:"mail_sent_ok";s:47:"Sua mensagem foi enviada com sucesso. Obrigado.";s:12:"mail_sent_ng";s:100:"Falha ao enviar sua mensagem. Por favor tente mais tarde ou contacte o administrador de outra forma.";s:17:"akismet_says_spam";s:100:"Falha ao enviar sua mensagem. Por favor tente mais tarde ou contacte o administrador de outra forma.";s:16:"validation_error";s:77:"Ocorreram erros de validação. Por favor confira os dados e envie novamente.";s:12:"accept_terms";s:43:"Por favor aceite os termos para prosseguir.";s:13:"invalid_email";s:39:"O endereço de e-mail parece inválido.";s:16:"invalid_required";s:43:"Por favor preencha este campo obrigatório.";s:23:"quiz_answer_not_correct";s:29:"Sua resposta está incorreta.";s:13:"upload_failed";s:27:"Falha no upload do arquivo.";s:24:"upload_file_type_invalid";s:39:"Este tipo de arquivo não é permitido.";s:21:"upload_file_too_large";s:30:"Este arquivo é grande demais.";s:23:"upload_failed_php_error";s:27:"Falha no upload do arquivo.";s:17:"captcha_not_match";s:35:"O código digitado está incorreto.";s:4:"spam";s:93:"Failed to send your message. Please try later or contact the administrator by another method.";s:14:"invalid_number";s:28:"Number format seems invalid.";s:16:"number_too_small";s:25:"This number is too small.";s:16:"number_too_large";s:25:"This number is too large.";s:11:"invalid_url";s:18:"URL seems invalid.";s:11:"invalid_tel";s:31:"Telephone number seems invalid.";s:12:"invalid_date";s:26:"Date format seems invalid.";s:14:"date_too_early";s:23:"This date is too early.";s:13:"date_too_late";s:22:"This date is too late.";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_additional_settings</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_form</wp:meta_key>
			<wp:meta_value><![CDATA[<p>Seu nome (obrigatório)<br />
    [text* your-name] </p>

<p>Seu e-mail (obrigatório)<br />
    [email* your-email] </p>

<p>Assunto<br />
    [text your-subject] </p>

<p>Sua mensagem<br />
    [textarea your-message] </p>

<p>[submit "Enviar"]</p>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Como Recuperar Posts do Twitter Rapidamente com Python</title>
		<link>http://www.pythonize.org/crawler-pra-twitter/</link>
		<pubDate>Tue, 07 Feb 2012 18:00:00 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=333</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.pythonize.org/como-criar-um-crawler-pra-twitter"><img class="aligncenter wp-image-532 size-full" src="http://www.pythonize.org/wordpress/wp-content/uploads/2012/02/twitter-buttons-medio.jpg" alt="twitter buttons" width="640" height="427" /></a>
Neste post vamos criar um crawler para recuperar tweets públicos. Tweets públicos são aqueles que não necessitam de autenticação, ou seja, não é necessário ter uma conta no Twitter para ler esses tweets.<!--more-->

Com Python, é bem simples recuperar qualquer status do Twitter, para isso, vamos utilizar o pacote <a title="python-twitter" href="http://code.google.com/p/python-twitter/" target="_blank">python-twitter</a>, que pode ser instalado via setuptools:

https://gist.github.com/andersonberg/33994a55882ccc3988a8

Ou, pode ser baixado neste <a href="http://code.google.com/p/python-twitter/downloads/list">link</a>. Para instalar, extraia o conteúdo, vá até a pasta onde foi extraído e faça:

https://gist.github.com/andersonberg/954be1d2ac97aa2b45d6

O python-twitter provê acesso a API do Twitter via código Python.

Para ler a Api e buscar ajuda, faça:

https://gist.github.com/andersonberg/765b4999e06ee445d684

Para começar a utilizar o python-twitter, basta importar o pacote e criar uma instância da classe twitter.Api():

https://gist.github.com/andersonberg/c6b9755afa076217f987

Então, é possível obter os últimos tweets públicos facilmente com a função <em>GetPublicTimeline</em>, que retorna uma lista contendo em torno de 20 objetos do tipo <em>twitter.Status</em>, o texto do tweet em si está no atributo <em>text</em>:

https://gist.github.com/andersonberg/c107a3c9b0b950631f98

Agora, para recuperar os 20 últimos tweets de um usuário específico, existe a função <em>GetUserTimeline</em>. Trocando '<em>user</em>' por um usuário real do twitter no código abaixo, você obtém uma lista semelhante a que foi retornada pela função <em>GetPublicTimeline:</em>

https://gist.github.com/andersonberg/49896ca93b4f1b949e3a

A função <em>GetUserTimeline </em>permite configurar a quantidade de tweets a serem recuperados através do parâmetro <em>count:</em>

https://gist.github.com/andersonberg/30750ee4c8c00f5b715c

Neste código utilizei a função <em>encode</em> para imprimir caracteres especiais em português.

Você pode encontrar mais detalhes das funções mostradas aqui na documentação da API, basta fazer no terminal:

https://gist.github.com/andersonberg/80dc886d5b102464764d]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2012-02-07 18:00:00</wp:post_date>
		<wp:post_date_gmt>2012-02-07 18:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crawler-pra-twitter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python-twitter"><![CDATA[python-twitter]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[twitter]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="post_tag" nicename="webcrawler"><![CDATA[webcrawler]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[twitter]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[94]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Como recuperar tweets públicos de usuários do Twitter de forma bem simples usando Python com a biblioteca python-twitter.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[twitter, crawler, python-twitter, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Como Recuperar Posts do Twitter Rapidamente com Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:1;s:8:"facebook";i:8;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043226265]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[como-criar-um-crawler-pra-twitter]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Murian]]></wp:comment_author>
			<wp:comment_author_email>murianribeiro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.63.176.94</wp:comment_author_IP>
			<wp:comment_date>2012-03-01 21:50:18</wp:comment_date>
			<wp:comment_date_gmt>2012-03-01 21:50:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muito legal o tutorial, só tenho uma dúvida, como eu gravo o conteúdo da time line por exemplo, quando faço uma solicitação, dentro de um arquivo, e não simplesmente imprimindo na tela com o comando print user_tweets?

Valeu ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648404]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.40.182.243</wp:comment_author_IP>
			<wp:comment_date>2012-03-02 13:46:35</wp:comment_date>
			<wp:comment_date_gmt>2012-03-02 13:46:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Aí é  tratamento de arquivos, isso é simples.
Uma sugestão seria:

arquivo = open("tweets.txt", 'w')
arquivo.writelines(user_tweets)

Não esqueça de fechar o arquivo no final:
arquivo.close()]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>34</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648404]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649040]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Murian]]></wp:comment_author>
			<wp:comment_author_email>murianribeiro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.35.68.73</wp:comment_author_IP>
			<wp:comment_date>2012-03-03 10:17:34</wp:comment_date>
			<wp:comment_date_gmt>2012-03-03 10:17:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Legal! funcionou certinho.. eu tava tentando gravar com arquivo.writelines(tweets) só, aí não estava dando certo!! valeu ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648405]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Tutorial WordPress]]></wp:comment_author>
			<wp:comment_author_email>twp_1364@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.ziip.com.br/tutoriais/</wp:comment_author_url>
			<wp:comment_author_IP>201.78.27.135</wp:comment_author_IP>
			<wp:comment_date>2012-04-06 23:46:01</wp:comment_date>
			<wp:comment_date_gmt>2012-04-07 02:46:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muito boa a dica! Gostaria de criar um crawler para "pegar" certas tags e ficar exibindo na lateral do meu site. Tem como fazer isso? Por favor...preciso muito disso!!!
Obrigado!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648406]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.212.142.182</wp:comment_author_IP>
			<wp:comment_date>2012-04-07 01:31:57</wp:comment_date>
			<wp:comment_date_gmt>2012-04-07 04:31:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cara, a princípio vc pode usar uma função da Api chamada GetSearch(). Por exemplo: tweets = api.GetSearch("#nome_da_tag") e ela vai retornar os últimos tweets com essa tag. 
Posso pesquisar mais e te dizer se tem outra solução melhor. Por enquanto testa essa e dá uma olhada na documentação. Pra  ler a documentação da api faz, no terminal: pydoc twitter.Api
Espero ter ajudado!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>55</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648406]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649039]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[Murian]]></wp:comment_author>
			<wp:comment_author_email>murianribeiro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.19.168.131</wp:comment_author_IP>
			<wp:comment_date>2012-04-23 15:59:26</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 18:59:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oi de novo, como o forum no google do twitter python é bem desatualizado tive que vir aqui te incomodar de novo :/
Bom, tenho duas questões, quanto a aquisição de dados:

Primeiro:  quando uso a função GetUserTimeline eu posso definir o numero de tweets que poderei pegar por vez, bem como o número de páginas. Fixei o count=150 e para o page coloquei uma variável. Ai entra a questão, como consigo saber antes de fazer as solicitações quantas páginas de dados um usuário terá (para que eu possa saber o valor que colocarei na variável atrelada ao page?

Segundo: uma segunda coisa que estou fazendo é salvar todos os nomes de amigos de um determinado usuário em um arquivo. Ai entra outra limitação, quando uso essa função ele só me retorna os 100 primeiros amigos. Como driblar isso?

Já de antemão muito obrigado ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648407]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.98.18.221</wp:comment_author_IP>
			<wp:comment_date>2012-04-27 14:52:49</wp:comment_date>
			<wp:comment_date_gmt>2012-04-27 17:52:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Vou tentar responder.

Primeiro: Eu não sei se tem como saber antecipadamente quantas páginas de dados tem um usuário, você tem que chutar um número (pode ser um número alto, talvez 100 ou 150) ou definir quantas páginas de informações você quer. Então você pode fazer um laço iterando até esse número máximo de páginas, onde cada iteração é uma página que você recupera, daí vc pode ficar verificando se a lista de tweets q a função retornou está vazia (por exemplo: if len(tweets) < 1), se estiver vazia vc pode terminar o laço. Uma dica que eu dou na hora de recuperar várias páginas é tratar a exceção TwitterError, que é levantada se vc faz muitas requisições ao mesmo tempo, daí vc pode dar um time.sleep de uns 15 a 30 segundos pra voltar a fazer requisições.

Segundo: A função GetFriends tem um parâmetro chamado "cursor", serve como paginação também e o valor default dele é -1, eu nunca testei esse parâmetro, mas vc pode colocar outro valor nele (GetFriends(user=nome, cursor=2)) e testar.

Tenta aí e compartilha tua experiência, qualquer dúvida pode comentar!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>95</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648407]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649042]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[Murian]]></wp:comment_author>
			<wp:comment_author_email>murianribeiro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.39.113.253</wp:comment_author_IP>
			<wp:comment_date>2012-05-06 17:25:41</wp:comment_date>
			<wp:comment_date_gmt>2012-05-06 20:25:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ótima dica anderson, eu sou iniciante em python mas já to impressionado com o poder dessa linguagem. realmente fantástico. as dicas que tu deu funcionaram certinho. a única que não deu certo foi a do getfriends com o cursos, na verdade deu certo, mas por exemplo, se uma pessoa tem menos de   100 amigos, e eu tenha colocado o cursor como 2 por exemplo ela pega duas vezes a msm lista de amigos.

Quanto ao TwitterError, tens ideia de como poderia fazer para se ele me retornar um erro, eu colocar esse  time.sleep ou alguma outra função, sem que saia imediatamente do programa?

valeu!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>100</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649042]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649163]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.17.0.80</wp:comment_author_IP>
			<wp:comment_date>2012-05-06 22:49:40</wp:comment_date>
			<wp:comment_date_gmt>2012-05-07 01:49:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[TwitterError já é uma exceção (um erro), vc trata ele como uma exceção normal, com "except". Daí vc chama o time.sleep()]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>110</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649163]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649451]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[Murian]]></wp:comment_author>
			<wp:comment_author_email>murianribeiro@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.39.113.253</wp:comment_author_IP>
			<wp:comment_date>2012-05-06 23:45:53</wp:comment_date>
			<wp:comment_date_gmt>2012-05-07 02:45:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A legal, mas acho que não me expressei bem no outro comentário. o que quero fazer é mais ou menos assim:
tenho uma função pra pegar a lista de amigos de diversas pessoas. 

def pegaramigos():
        ........

dae no final do programa usei assim:

try:
     pegaramigos()
except twitter.Twittererror:
     time.sleep(20)


até aqui blz, ele tenta pegar os amigos, se deu um erro ele entra na segunda opção! mas a minha dúvida é a seguinte:

estou pegando a lista de amigos de 20 pessoas por exemplo (ele teve sucesso no try: pegar amigos) só que lá pela 14ª pessoa ele excedeu o limite e entra no except... como faço pra seguir da 14ª sem ter que recomeçar do zero. similar ao que o nodexl faz quando coloca pra pegar os amigos. ele dá um pause (acho que de 5 horas) e depois segue pegando os dados de onde parou e não do início. 

[]'s]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>112</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649451]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649455]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.17.0.80</wp:comment_author_IP>
			<wp:comment_date>2012-05-06 23:58:39</wp:comment_date>
			<wp:comment_date_gmt>2012-05-07 02:58:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tenta colocar o try-except num laço (while ou for)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>113</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649455]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649844]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2659</wp:comment_id>
			<wp:comment_author><![CDATA[Nádia Félix]]></wp:comment_author>
			<wp:comment_author_email>nadia.felix@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>186.223.208.202</wp:comment_author_IP>
			<wp:comment_date>2013-05-30 14:13:27</wp:comment_date>
			<wp:comment_date_gmt>2013-05-30 17:13:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oi Anderson, este método GetPublicTimeline() ainda existe na Api? Estou tentando usar e está retornando um erro. Estou tentando retornar tweets a partir dos seguidores de um usuário, isto é possível?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369934007.273336887359619140625;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1379006185.0346400737762451171875;s:7:"message";s:50:"absd alterou o status do comentário para approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648408]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3180</wp:comment_id>
			<wp:comment_author><![CDATA[Rogerio Barros]]></wp:comment_author>
			<wp:comment_author_email>rogerio.barros@credz.com.br</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>179.184.158.186</wp:comment_author_IP>
			<wp:comment_date>2014-05-19 17:48:02</wp:comment_date>
			<wp:comment_date_gmt>2014-05-19 20:48:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anderson,

Boa tarde.

Você tem algum  material para consulta de dados de fans de uma fanpage, pois tenho que realizar um trabalho com essas informações.

Att.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400532482.6280028820037841796875;s:7:"message";s:34:"O Akismet liberou este comentário";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1408128871.28664493560791015625;s:7:"message";s:43:"absd changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600648409]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Python e lambda</title>
		<link>http://www.pythonize.org/python-e-lambda/</link>
		<pubDate>Mon, 16 Jan 2012 02:12:27 +0000</pubDate>
		<dc:creator><![CDATA[romulo]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[Sabe lambda? Lambda é algo muito legal. Com lambda você pode criar em tempo de execução funções e fazer algumas graças.

Vejamos algo bonito com lambda. Suponha a função fatorial.

A função fatorial é definida tal que dado um número x o fatorial deste número é:<!--more-->

x*(x-n) com n variando de (x-1) até 1.

Logo podemos traduzir num código python:

[python]
def fatorial(x):
 if x&lt;=1:
   return 1
 else:
   return x*fatorial(x-1)
[/python]

Esse código usa recursão, espero que você saiba o que é recursão... ;)

Bom, com lambda esse mesmo código pode ter apenas uma linha, duvida?

[python]
fatorial = lambda x: 1 if x &lt;=1 else x*fatorial(x-1)
[/python]

Definimos em fatorial uma função que executa o calculo de um fatorial de um dado número x.

Agora abra o seu interpratador python copie e cole o código para testar. Né lindo?

Python tanto na versão 2 quanto na versão 3 define lambda com um atalho para criação de funções. A sintaxe é definida assim:
<pre><strong id="grammar-token-lambda_form">lambda_form </strong> ::= "lambda" [<a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"><tt>parameter_list</tt></a>]: <a href="http://docs.python.org/reference/expressions.html#grammar-token-expression"><tt>expression</tt></a></pre>
<pre id="index-1018"><strong id="grammar-token-old_lambda_form">old_lambda_form</strong> ::=  "lambda" [<a href="http://docs.python.org/reference/compound_stmts.html#grammar-token-parameter_list"><tt>parameter_list</tt></a>]: <a href="http://docs.python.org/reference/expressions.html#grammar-token-old_expression"><tt>old_expression</tt></a></pre>
Vou ler para você: uma expressão lambda é formada pela palavra reservada lambda seguida por uma lista (não o objeto lista) de parametros seperada por ":" e a expressão.

No nosso código a cima, fatorial é o nome da expressão lambda. O python sabe que a função é um lambda porque você disse isso usando a string lambda logo no inicio da expressão.

O x é o parametro. Se você quisesse passar mais parametros, bastava separa-lo por virgulas. Assim:

[python]
funcao = lambda x,y,z: x+y+z
[/python]

pergunta, qual o retorno de funcao(1,2,3) ?

Agora a parte mais difícil, a expressão.

A expressão é como você vai manipular os parametros para ter um retorno. Com lambda não é necessário por a palavra reservada return.

Essa expressão só pode ser de três formas:
<ul>
	<li>Uma comando de uma linha (x+1)</li>
	<li>outra expressão lambda.</li>
	<li>Ou uma expressão condicional. (incluem testes de lógica [or, and, not] )</li>
</ul>
No fatorial eu usei uma expressão condicional. Na funcao eu usei uma expressão de uma linha. E poderia usar outra expressão lambda.

Mas para memorizar, você deve escrever a sua expressão sempre com uma linha.

Você pode fazer uso de recursão e uso avançados de exepressão.

original :<a href="http://romulojales.com/python-e-lambda/"> http://romulojales.com/python-e-lambda/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2012-01-16 02:12:27</wp:post_date>
		<wp:post_date_gmt>2012-01-16 02:12:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-e-lambda</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="core"><![CDATA[Core]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Como criar expressões lambda em Python.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[lambda, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Python e lambda]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:1;s:8:"facebook";i:4;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3044436393]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Python - Dividindo uma Lista em N Partes</title>
		<link>http://www.pythonize.org/python-dividindo-uma-lista-em-n-partes/</link>
		<pubDate>Wed, 18 Jan 2012 01:52:26 +0000</pubDate>
		<dc:creator><![CDATA[romulo]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[frequentemente eu uso esse código, então ao invés de ir no código antigo vou neste post.
Basicamente o que eu quero é o seguinte: Tenho uma lista e quero dividir em n partes quase-iguais. Explico

<!--more-->

Suponha a lista [1,2,3,4,5,6,7,8,9,10] quero dividir a lista em 5 partes.

A divisão da lista resultaria em [1,2], [3,4], [5,6], [7,8], [9,10]

Ok, isso é chato de fazer...

Mas vamos ao código.

https://gist.github.com/andersonberg/1c9a8feeb0518f73e283

É possível que ocorrram variações para o tipo de lista.

original: <a title="http://romulojales.com/python-dividindo-uma-lista-em-n-partes" href="http://romulojales.com/python-dividindo-uma-lista-em-n-partes">http://romulojales.com/python-dividindo-uma-lista-em-n-partes</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2012-01-18 01:52:26</wp:post_date>
		<wp:post_date_gmt>2012-01-18 01:52:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-dividindo-uma-lista-em-n-partes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="algoritmo"><![CDATA[algoritmo]]></category>
		<category domain="post_tag" nicename="lista"><![CDATA[lista]]></category>
		<category domain="category" nicename="programacao"><![CDATA[Programação]]></category>
		<category domain="post_tag" nicename="slice"><![CDATA[slice]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[lista]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[57]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Algoritmo em python para dividir uma lista em n partes.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[algoritmo, lista, slice, python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Python - Dividindo uma lista em n partes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:3;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3051238346]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Como Criar Scripts SSH Rapidamente com Python</title>
		<link>http://www.pythonize.org/ssh-com-paramiko/</link>
		<pubDate>Mon, 20 May 2013 13:45:46 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=430</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<a href="http://www.pythonize.org/ssh-com-paramiko"><img class="aligncenter wp-image-568 size-full" src="http://www.pythonize.org/wordpress/wp-content/uploads/2013/05/acesso-remoto-a-servidores-e1411426759286.jpg" alt="acesso-remoto-a-servidores" width="400" height="232" /></a>

&nbsp;

Às vezes é necessário trabalhar com <strong>vários</strong> dispositivos ligados em <strong>rede</strong>, quer sejam computadores, roteadores ou outros tipos de equipamentos.

Em muitas ocasiões precisamos enviar <strong>comandos</strong> e <strong>instruções</strong> para estes equipamentos. Isso geralmente é feito através do envio de comandos ou dados via <strong>SSH</strong>.

Tudo bem entrar em um terminal e enviar um comando ou dois pra um equipamento ou outro.

Mas e se forem <strong>milhares</strong> de dispositivos interconectados?

Ou se são <strong>dezenas</strong> ou <strong>centenas</strong> de instruções em série?

E se estas duas situações ocorrem <strong>juntas</strong>?

<!--more-->

Nesses casos é preciso criar scripts que façam tudo automatizado.

Neste artigo vou compartilhar minha experiência com o Paramiko, um módulo Python que fornece uma interface ao protocolo SSH2.

SSH é um protocolo de rede criptografado que realiza conexão segura entre computadores e permite executar comandos remotamente. Em diversas situações é necessário automatizar o processo de conexão e execução de comandos em um computador remoto.

<h2>Como instalar o Paramiko</h2>

Para instalar o Paramiko é necessário instalar antes o PyCrypto, que pode ser encontrado via easy_install ou no repositório da sua distribuição Linux. Encontrei algumas dificuldades para instalar o pycrypto no Windows, por sorte existem alguns binários compilados do pycrypto: <a title="PyCrypto Windows" href="http://www.voidspace.org.uk/python/modules.shtml#pycrypto" target="_blank">http://www.voidspace.org.uk/python/modules.shtml#pycrypto</a>

Depois é só instalar o paramiko via easy_install ou procurando no repositório da distro Linux.

O paramiko tem uma classe base que fornece toda a interface para comunicação: paramiko.SSHClient. Para criar um objeto e criar uma conexão com um servidor é bem simples:

https://gist.github.com/andersonberg/aa8b0c1b102025cf03c0

Neste exemplo, a função 'connect' está conectando ao servidor SSH local, passando nome de usuário e senha através dos parâmetros 'username' e 'password', respectivamente.

Quando você conecta em um servidor ssh pela primeira vez, uma chave é automaticamente armazenada em disco num arquivo chamado ".ssh/known_hosts" na sua pasta home. Para isto é preciso o usuário, manualmente, aceitar o armazenamento da chave do servidor, confirmando a confiabilidade deste. Para fazermos isso automaticamente através do Paramiko, utilizamos o objeto "set_missing_host_key_policy", passando "paramiko.AutoAddPolicy()" como parâmetro para aceitar automaticamente as chaves. Então, nosso código anterior pode ser modificado:

https://gist.github.com/andersonberg/7bbe55aeb6101cf6ed4a

Tenha o cuidado de somente utilizar este artifício com servidores que você confia.

<h2><strong>Enviando comandos via ssh</strong></h2>

Já aprendemos como conectar em um computador remotamente via ssh. Agora vamos ver como enviar comandos e receber os resultados destes comandos. Isto é feito com o método "exec_command" do SSHClient(). Este método retorna uma tupla de objetos (stdin, stdout, stderr) que você pode ler (no caso do stdout e stderr) ou escrever (stdin). A sintaxe para executar um comando é a seguinte:

https://gist.github.com/andersonberg/bbdb1d9dcb1722d21bec

Que vai enviar o comando 'ls' para listar os arquivos do diretório atual. Para exibir o retorno deste comando podemos ler o conteúdo do objeto stdout e, em seguida, fechar a conexão ssh:

https://gist.github.com/andersonberg/1674147715dd13f3ded6

Em alguns casos precisamos enviar outras informações para execução do comando, como por exemplo uma senha de administrador. Podemos fazer isto escrevendo no objeto stdin.

https://gist.github.com/andersonberg/17f6ef014b9750bf823d

O retorno dos comando pode ser tratado com as poderosas ferramentas de manipulação de string de Python, ou ainda filtradas com expressões regulares, dando ainda mais opções ao programador na hora de criar um script completo. Em outro post darei mais detalhes sobre a utilização do Paramiko.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2013-05-20 10:45:46</wp:post_date>
		<wp:post_date_gmt>2013-05-20 13:45:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssh-com-paramiko</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="paramiko"><![CDATA[paramiko]]></category>
		<category domain="post_tag" nicename="pycrypto"><![CDATA[pycrypto]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<category domain="category" nicename="tutorial"><![CDATA[Tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacands_meta_show</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_postmessage</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>lacandsnw_twitterhandle</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_lacandsnw_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[done]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_post_restored_from</wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:447;s:16:"restored_by_user";i:1;s:13:"restored_time";i:1414625455;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[ssh]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[94]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Com o módulo paramiko de Python é possível criar rapidamente scripts para automatizar processos em uma máquina remota com acesso via ssh]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metakeywords</wp:meta_key>
			<wp:meta_value><![CDATA[ssh, python, paramiko, pycrypto]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Como Criar Scripts SSH Rapidamente com Python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:2;s:8:"facebook";i:6;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3043225166]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3224</wp:comment_id>
			<wp:comment_author><![CDATA[andersonberg]]></wp:comment_author>
			<wp:comment_author_email>andersonberg@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>179.185.12.194</wp:comment_author_IP>
			<wp:comment_date>2014-07-02 13:57:30</wp:comment_date>
			<wp:comment_date_gmt>2014-07-02 16:57:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Você pode fazer dar um print do stdout dentro de alguma função e quando mandar o python executar o script desviar a saída pra um arquivo de texto. Por exemplo:
python script.py > stdout.txt
Isso funciona tanto no Windows quanto no Linux.

Outra dica que posso te dar é usar o fabric, no lugar do paramiko. Em breve estarei comentando sobre ele aqui no blog. Por enquanto você pode pesquisar sobre ele.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3223</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404320250.241712093353271484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649037]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649047]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3223</wp:comment_id>
			<wp:comment_author><![CDATA[natanael]]></wp:comment_author>
			<wp:comment_author_email>natanael_aguiar@atlantico.com.br</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>187.58.65.5</wp:comment_author_IP>
			<wp:comment_date>2014-07-02 13:45:25</wp:comment_date>
			<wp:comment_date_gmt>2014-07-02 16:45:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[estou iniciando em python queria saber se vocês poderiam me ajuda.

Estou conseguindo fazer a conexao ssh com o paramiko e no mesmo script queria copiar o arquivo do computador que estou acessando para minha maquina local eu usei o scp mas se eu usar o comando stdin, stdout, stderr = ssh.exec_command() ele joga o resutado para stdout como que eu faço para ele realmente copiar para o meu pc?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404320054.2475299835205078125;s:7:"message";s:43:"absd changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:4:"absd";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1404319525.5970818996429443359375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1600649037]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Como criar uma API REST com Django</title>
		<link>http://www.pythonize.org/criar-api-rest-python/</link>
		<pubDate>Sun, 05 Oct 2014 19:37:02 +0000</pubDate>
		<dc:creator><![CDATA[absd]]></dc:creator>
		<guid isPermaLink="false">http://www.pythonize.org/?p=577</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<a href="http://www.pythonize.org/criar-api-rest-python"><img class="alignleft wp-image-649 size-full" src="http://www.pythonize.org/wordpress/wp-content/uploads/2014/10/Cloud-1.png" alt="Cloud Word REST API" width="1000" height="491" /></a>

Como construir uma <strong>API Restful</strong> totalmente <strong>configurável</strong>, <strong>funcional</strong> e <strong>simples</strong>?

Como tornar essa API <strong>pública</strong>, ao mesmo tempo que <strong>protege </strong>seus dados?

E como fazer tudo isso usando <strong>Django</strong>?

Você vai conhecer um pouco do <strong>Tastypie</strong>, um framework Python muito eficiente que provê uma <a href="http://pt.wikipedia.org/wiki/API">API </a>(Application Programming Interface, em português: Interface de Programação de Aplicativos) <a href="http://pt.wikipedia.org/wiki/REST">REST </a>totalmente configurável para trabalhar com Django.

<!--more-->

Para acompanhar o que vamos apresentar aqui, <strong>não</strong> é necessário ser expert em Django. Vamos seguir um <strong>passo-a-passo</strong> bem simples. Se você já sabe como configurar e usar o Django, pode pular para a parte de configuração do Tastypie, ou utilizar este tutorial como lembrete.

Se você quer se aprofundar no estudo de Django recomendo os seguintes links: <a href="https://docs.djangoproject.com/en/1.6/intro/tutorial01/" target="_blank">Django Tutorial</a>, <a href="http://www.tangowithdjango.com/book/" target="_blank">Tango with Django</a>.

E para aprender mais sobre RESTful webservices, tem um tutorial bem interessante <a href="http://www.restapitutorial.com/">aqui</a>.

<h2>Como Funciona o Tastypie</h2>

O Tastypie ajuda você a publicar os models criados no Django, ao mesmo tempo que permite total controle sobre que é exibido ou não. O Tastypie <strong>serializa</strong> a saída em diversos formatos, incluindo json. Através da criação de objetos 'Resource', o Tastypie implementa formas de obter dados (GET), criar (POST) e modificar (PUT/PATCH) dados e excluir dados (DELETE).

Com estas dicas, você irá construir uma pequena API pra um exemplo de <strong>microblog</strong>, como o Twitter.

<h2>Configurando o ambiente de desenvolvimento</h2>

Antes de tudo e qualquer coisa, pra não bagunçar o seu ambiente, instale o <a href="https://virtualenv.pypa.io/en/latest/">virtualenv</a>. O virtualenv é uma ferramenta que cria um ambiente Python <strong>separado</strong> do seu sistema, evitando maiores dores de cabeça com configurações.

Para criar um ambiente virtual é bem simples, basta passar o comando virtualenv seguido do diretório onde vai ser armazenado o ambiente, por exemplo:

<pre>$ virtualenv venv
</pre>

Pronto, seu ambiente virtual foi instalado na pasta 'venv'. Agora, pra começar a usar é preciso ativar o ambiente:

<pre>$ source venv/bin/activate
</pre>

Você pode perceber que o contexto da sua linha de comando mudou, quer dizer que o ambiente está pronto pra ser usado.

<h2>Instalação do Tastypie</h2>

Com o ambiente ativado, agora é a hora de instalar o django, em seguida instale algumas dependências do tastypie e ele próprio:

<pre>$ pip install django
$ pip install python-mimeparse lxml defusedxml
$ pip install django-tastypie
</pre>

Pra maiores detalhes de instalação e configuração, você pode olhar na <a href="http://django-tastypie.readthedocs.org/en/latest/tutorial.html">documentação</a> do Tastypie.

<h2>Criando um projeto Django</h2>

Com tudo instalado, criar um projeto django e uma aplicação dentro do projeto também é bem fácil:

<pre>$ django-admin.py startproject webserver
$ cd webserver/webserver
$ python ../manage.py startapp rest_app
</pre>

<h2>Configurando o banco de dados</h2>

Vamos utilizar como banco de dados o Sqlite, verifique se no seu arquivo settings.py já está habilitado:

https://gist.github.com/andersonberg/76a3ebe4acb9a003efa1

Crie o banco de dados inicial para o Django:

<pre>$ python manage.py syncdb
</pre>

<h3>Testando tudo até aqui</h3>

Pra testar tudo até aqui, você pode iniciar o servidor:

<pre>$ python manage.py runserver
</pre>

E acessar através da url: http://localhost:8000

&nbsp;

<h3>pip freeze</h3>

O pip tem um comando que cria um registro dos pacotes que foram instalados no ambiente. Isso é útil se você quiser recriar o projeto e ter todos os pacotes nas versões necessárias.

<pre>$ pip freeze &gt; requirements.txt

</pre>

<h2>Criando a API</h2>

<h3>Criando uma nova aplicação</h3>

Você cria um nova aplicação com o comando startapp:

<pre>$ python manage.py startapp rest_app
</pre>

Lembre-se de atualizar o INSTALLED_APPS no seu arquivo settings.py com a aplicação criada.

https://gist.github.com/andersonberg/dba5aa7cb94353cc872a

&nbsp;

<h3>Configuração inicial do Tastypie</h3>

O primeiro passo é adicionar 'tastypie' em INSTALLED_APPS no arquivo settings.py do seu projeto Django. A documentação do Tastypie diz que essa é a única configuração obrigatória. Para nosso exemplo vai ser suficiente por enquanto.

https://gist.github.com/andersonberg/5c51a04343d240d3b3b5

Eu tive que fazer uma modificação no settings.py por causa de um problema com autenticação. Não sei se será seu caso, só tive que remover uma linha do MIDDLEWARE_CLASSES:

https://gist.github.com/andersonberg/fe8b16ab80645637e820

<h3>Criando seus models</h3>

O <a href="https://docs.djangoproject.com/en/dev/topics/db/models/">model</a> é onde você armazena as informações básicas dos seus dados. Cada model é uma classe Python que herda de django.db.models.Model e que se torna uma tabela no seu banco de dados. Vamos criar alguns models para nossa aplicação.

Você só precisa criar um model para a nossa aplicação que é a classe que vai conter um post no microblog. A classe de usuário podemos obter do próprio Django.

Então, edite o seu arquivo models.py e adicione a seguinte classe:

https://gist.github.com/andersonberg/8116e40972fda35f97a1

Este model tem um usuário associado, a data de publicação do post, o próprio texto e um campo chamado <em>slug</em>, que identifica um determinado post e vai ser útil pra poder fazer buscas.

Pra personalizar o slug, você precisa sobrescrever o método save() do model. Neste caso, vamos pegar somente os 50 primeiros caracteres do post como slug:

https://gist.github.com/andersonberg/8661367fe1fc03b65ac8

A classe completa fica assim:

https://gist.github.com/andersonberg/ea8125c4e8a8a8440ed6

<h3>Criando Resources</h3>

Tudo certo, mas como eu faço para expor meus dados através da API?

Você precisa criar <strong>resources</strong>.

No Tastypie, resources são os intermediários entre o usuário da sua API e os models de Django.

Crie o arquivo api.py no diretório da aplicação que você gerou anteriormente:

https://gist.github.com/andersonberg/118b059e905419e25b8b

Você também tem que criar um resource para a classe de usuário:

https://gist.github.com/andersonberg/95b6c48f251e13b6aae2

E associar um usuário a um post. Logo, é preciso adicionar a seguinte linha na classe PostResource:

https://gist.github.com/andersonberg/d2ad0f1750b84543b4e6

O arquivo api.py completo fica assim:

https://gist.github.com/andersonberg/d5b7663bce68d728bad7

A linha <em>authorization = Authorization()</em> serve para que você possa criar e modificar elementos na sua API utilizando o cURL, como vai ser mostrado mais a frente.

<h3>Views e URLs</h3>

Agora você precisa exibir os resources de alguma forma para que seus usuário tenham acesso à API. Para isso, é necessário criar urls para acessar os seus dados. Edite o arquivo urls.py do seu projeto para que fique assim:

https://gist.github.com/andersonberg/84c55e1ea1339673940f

Você já pode iniciar o <em>runserver</em> e acessar sua API via URLs, por exemplo:

<a href="http://127.0.0.1:8000/api/post/?format=json">http://127.0.0.1:8000/api/post/?format=json</a>

<a href="http://127.0.0.1:8000/api/post/1/?format=json">http://127.0.0.1:8000/api/post/1/?format=json</a>

<h3>Acessando a API</h3>

Você pode interagir com a API usando o <a href="http://curl.haxx.se/">cURL</a>. É possível usar uma ferramenta de gerenciamento de banco SQLite, mas você perde a função de criar o slug automaticamente.

<h4>Recuperando os Dados</h4>

Para visualizar os dados, ou seja, obter os dados com o curl, o procedimento é semelhante a acessar um URL via browser:

<pre>$ curl http://localhost:8000/api/post/1/?format=json
</pre>

<h4>Enviando Dados</h4>

Para enviar e criar novos dados, você precisa usar a função POST, como estamos utilizando json, você pode enviar nesse formato da seguinte forma:

<pre>curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"text": "Um post bem rápido", "user": "/api/user/1/"}' http://localhost:8000/api/post/
</pre>

<h3>O estado atual do Tastypie</h3>

Recentemente, o criador do Tastypie escreveu <a href="http://toastdriven.com/blog/2014/may/23/state-tastypie/">este artigo</a> comentando sobre o atual status do Tastypie, não só em termos de desenvolvimento como em popularidade.

O Tastypie ainda não possui uma versão 1.0, pois existem alguns pontos que precisam ser melhorados. Um deles é o desempenho quando muitos objetos precisam ser serializados.

Outra questão importante é a incompatibilidade com o Django 1.7 e ele ainda comenta que possui um novo projeto para framework RESRFul, o <a href="https://github.com/toastdriven/restless">Restless</a>.

Minha intenção com este artigo é apenas mostrar como é simples criar uma API com Python e Django usando o Tastypie, mas existem outras opções que podem ser exploradas e você pode deixar seu comentário se já teve experiência com alguma delas.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>577</wp:post_id>
		<wp:post_date>2014-10-05 16:37:02</wp:post_date>
		<wp:post_date_gmt>2014-10-05 19:37:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>criar-api-rest-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[rest]]></category>
		<category domain="post_tag" nicename="tastypie"><![CDATA[tastypie]]></category>
		<category domain="category" nicename="web"><![CDATA[Web]]></category>
		<category domain="post_tag" nicename="web-2"><![CDATA[web]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_flare_counts</wp:meta_key>
			<wp:meta_value><![CDATA[a:4:{s:7:"twitter";i:0;s:8:"facebook";i:0;s:10:"googleplus";i:0;s:8:"linkedin";i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[API]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[Como criar uma API REST facilmente com Django]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Veja como criar uma API REST para uma aplicação de microblog de forma bem simples, no entanto poderosa com Django e Tastypie]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[como-criar-uma-api-rest-em-python]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[3086228572]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
